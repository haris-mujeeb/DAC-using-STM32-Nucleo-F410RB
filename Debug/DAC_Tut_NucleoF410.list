
DAC_Tut_NucleoF410.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a50  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  08003c18  08003c18  00013c18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004010  08004010  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004010  08004010  00014010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004018  08004018  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004018  08004018  00014018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800401c  0800401c  0001401c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004020  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  2000000c  0800402c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  0800402c  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b0cf  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b9b  00000000  00000000  0002b10b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b10  00000000  00000000  0002cca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a38  00000000  00000000  0002d7b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000143db  00000000  00000000  0002e1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c1ac  00000000  00000000  000425cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007d9f1  00000000  00000000  0004e777  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cc168  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030ac  00000000  00000000  000cc1b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08003c00 	.word	0x08003c00

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08003c00 	.word	0x08003c00

08000208 <__aeabi_dmul>:
 8000208:	b570      	push	{r4, r5, r6, lr}
 800020a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800020e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000212:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000216:	bf1d      	ittte	ne
 8000218:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800021c:	ea94 0f0c 	teqne	r4, ip
 8000220:	ea95 0f0c 	teqne	r5, ip
 8000224:	f000 f8de 	bleq	80003e4 <__aeabi_dmul+0x1dc>
 8000228:	442c      	add	r4, r5
 800022a:	ea81 0603 	eor.w	r6, r1, r3
 800022e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000232:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000236:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800023a:	bf18      	it	ne
 800023c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000240:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000244:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000248:	d038      	beq.n	80002bc <__aeabi_dmul+0xb4>
 800024a:	fba0 ce02 	umull	ip, lr, r0, r2
 800024e:	f04f 0500 	mov.w	r5, #0
 8000252:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000256:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800025a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800025e:	f04f 0600 	mov.w	r6, #0
 8000262:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000266:	f09c 0f00 	teq	ip, #0
 800026a:	bf18      	it	ne
 800026c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000270:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000274:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000278:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800027c:	d204      	bcs.n	8000288 <__aeabi_dmul+0x80>
 800027e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000282:	416d      	adcs	r5, r5
 8000284:	eb46 0606 	adc.w	r6, r6, r6
 8000288:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800028c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000290:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000294:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000298:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800029c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002a0:	bf88      	it	hi
 80002a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002a6:	d81e      	bhi.n	80002e6 <__aeabi_dmul+0xde>
 80002a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	pop	{r4, r5, r6, pc}
 80002bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002c0:	ea46 0101 	orr.w	r1, r6, r1
 80002c4:	ea40 0002 	orr.w	r0, r0, r2
 80002c8:	ea81 0103 	eor.w	r1, r1, r3
 80002cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002d0:	bfc2      	ittt	gt
 80002d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002da:	bd70      	popgt	{r4, r5, r6, pc}
 80002dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002e0:	f04f 0e00 	mov.w	lr, #0
 80002e4:	3c01      	subs	r4, #1
 80002e6:	f300 80ab 	bgt.w	8000440 <__aeabi_dmul+0x238>
 80002ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ee:	bfde      	ittt	le
 80002f0:	2000      	movle	r0, #0
 80002f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002f6:	bd70      	pople	{r4, r5, r6, pc}
 80002f8:	f1c4 0400 	rsb	r4, r4, #0
 80002fc:	3c20      	subs	r4, #32
 80002fe:	da35      	bge.n	800036c <__aeabi_dmul+0x164>
 8000300:	340c      	adds	r4, #12
 8000302:	dc1b      	bgt.n	800033c <__aeabi_dmul+0x134>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f305 	lsl.w	r3, r0, r5
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f205 	lsl.w	r2, r1, r5
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000320:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000324:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000328:	fa21 f604 	lsr.w	r6, r1, r4
 800032c:	eb42 0106 	adc.w	r1, r2, r6
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 040c 	rsb	r4, r4, #12
 8000340:	f1c4 0520 	rsb	r5, r4, #32
 8000344:	fa00 f304 	lsl.w	r3, r0, r4
 8000348:	fa20 f005 	lsr.w	r0, r0, r5
 800034c:	fa01 f204 	lsl.w	r2, r1, r4
 8000350:	ea40 0002 	orr.w	r0, r0, r2
 8000354:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000358:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f1c4 0520 	rsb	r5, r4, #32
 8000370:	fa00 f205 	lsl.w	r2, r0, r5
 8000374:	ea4e 0e02 	orr.w	lr, lr, r2
 8000378:	fa20 f304 	lsr.w	r3, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea43 0302 	orr.w	r3, r3, r2
 8000384:	fa21 f004 	lsr.w	r0, r1, r4
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	fa21 f204 	lsr.w	r2, r1, r4
 8000390:	ea20 0002 	bic.w	r0, r0, r2
 8000394:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f094 0f00 	teq	r4, #0
 80003a8:	d10f      	bne.n	80003ca <__aeabi_dmul+0x1c2>
 80003aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003ae:	0040      	lsls	r0, r0, #1
 80003b0:	eb41 0101 	adc.w	r1, r1, r1
 80003b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3c01      	subeq	r4, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1a6>
 80003be:	ea41 0106 	orr.w	r1, r1, r6
 80003c2:	f095 0f00 	teq	r5, #0
 80003c6:	bf18      	it	ne
 80003c8:	4770      	bxne	lr
 80003ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ce:	0052      	lsls	r2, r2, #1
 80003d0:	eb43 0303 	adc.w	r3, r3, r3
 80003d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3d01      	subeq	r5, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1c6>
 80003de:	ea43 0306 	orr.w	r3, r3, r6
 80003e2:	4770      	bx	lr
 80003e4:	ea94 0f0c 	teq	r4, ip
 80003e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ec:	bf18      	it	ne
 80003ee:	ea95 0f0c 	teqne	r5, ip
 80003f2:	d00c      	beq.n	800040e <__aeabi_dmul+0x206>
 80003f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f8:	bf18      	it	ne
 80003fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fe:	d1d1      	bne.n	80003a4 <__aeabi_dmul+0x19c>
 8000400:	ea81 0103 	eor.w	r1, r1, r3
 8000404:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000408:	f04f 0000 	mov.w	r0, #0
 800040c:	bd70      	pop	{r4, r5, r6, pc}
 800040e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000412:	bf06      	itte	eq
 8000414:	4610      	moveq	r0, r2
 8000416:	4619      	moveq	r1, r3
 8000418:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041c:	d019      	beq.n	8000452 <__aeabi_dmul+0x24a>
 800041e:	ea94 0f0c 	teq	r4, ip
 8000422:	d102      	bne.n	800042a <__aeabi_dmul+0x222>
 8000424:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000428:	d113      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800042a:	ea95 0f0c 	teq	r5, ip
 800042e:	d105      	bne.n	800043c <__aeabi_dmul+0x234>
 8000430:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000434:	bf1c      	itt	ne
 8000436:	4610      	movne	r0, r2
 8000438:	4619      	movne	r1, r3
 800043a:	d10a      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800043c:	ea81 0103 	eor.w	r1, r1, r3
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000444:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000448:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800044c:	f04f 0000 	mov.w	r0, #0
 8000450:	bd70      	pop	{r4, r5, r6, pc}
 8000452:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000456:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800045a:	bd70      	pop	{r4, r5, r6, pc}

0800045c <__aeabi_drsub>:
 800045c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e002      	b.n	8000468 <__adddf3>
 8000462:	bf00      	nop

08000464 <__aeabi_dsub>:
 8000464:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000468 <__adddf3>:
 8000468:	b530      	push	{r4, r5, lr}
 800046a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800046e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000472:	ea94 0f05 	teq	r4, r5
 8000476:	bf08      	it	eq
 8000478:	ea90 0f02 	teqeq	r0, r2
 800047c:	bf1f      	itttt	ne
 800047e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000482:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000486:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800048a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048e:	f000 80e2 	beq.w	8000656 <__adddf3+0x1ee>
 8000492:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000496:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800049a:	bfb8      	it	lt
 800049c:	426d      	neglt	r5, r5
 800049e:	dd0c      	ble.n	80004ba <__adddf3+0x52>
 80004a0:	442c      	add	r4, r5
 80004a2:	ea80 0202 	eor.w	r2, r0, r2
 80004a6:	ea81 0303 	eor.w	r3, r1, r3
 80004aa:	ea82 0000 	eor.w	r0, r2, r0
 80004ae:	ea83 0101 	eor.w	r1, r3, r1
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	2d36      	cmp	r5, #54	; 0x36
 80004bc:	bf88      	it	hi
 80004be:	bd30      	pophi	{r4, r5, pc}
 80004c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004d0:	d002      	beq.n	80004d8 <__adddf3+0x70>
 80004d2:	4240      	negs	r0, r0
 80004d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004e4:	d002      	beq.n	80004ec <__adddf3+0x84>
 80004e6:	4252      	negs	r2, r2
 80004e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ec:	ea94 0f05 	teq	r4, r5
 80004f0:	f000 80a7 	beq.w	8000642 <__adddf3+0x1da>
 80004f4:	f1a4 0401 	sub.w	r4, r4, #1
 80004f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004fc:	db0d      	blt.n	800051a <__adddf3+0xb2>
 80004fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000502:	fa22 f205 	lsr.w	r2, r2, r5
 8000506:	1880      	adds	r0, r0, r2
 8000508:	f141 0100 	adc.w	r1, r1, #0
 800050c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000510:	1880      	adds	r0, r0, r2
 8000512:	fa43 f305 	asr.w	r3, r3, r5
 8000516:	4159      	adcs	r1, r3
 8000518:	e00e      	b.n	8000538 <__adddf3+0xd0>
 800051a:	f1a5 0520 	sub.w	r5, r5, #32
 800051e:	f10e 0e20 	add.w	lr, lr, #32
 8000522:	2a01      	cmp	r2, #1
 8000524:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000528:	bf28      	it	cs
 800052a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800052e:	fa43 f305 	asr.w	r3, r3, r5
 8000532:	18c0      	adds	r0, r0, r3
 8000534:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	d507      	bpl.n	800054e <__adddf3+0xe6>
 800053e:	f04f 0e00 	mov.w	lr, #0
 8000542:	f1dc 0c00 	rsbs	ip, ip, #0
 8000546:	eb7e 0000 	sbcs.w	r0, lr, r0
 800054a:	eb6e 0101 	sbc.w	r1, lr, r1
 800054e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000552:	d31b      	bcc.n	800058c <__adddf3+0x124>
 8000554:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000558:	d30c      	bcc.n	8000574 <__adddf3+0x10c>
 800055a:	0849      	lsrs	r1, r1, #1
 800055c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000560:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000564:	f104 0401 	add.w	r4, r4, #1
 8000568:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800056c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000570:	f080 809a 	bcs.w	80006a8 <__adddf3+0x240>
 8000574:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	ea41 0105 	orr.w	r1, r1, r5
 800058a:	bd30      	pop	{r4, r5, pc}
 800058c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000590:	4140      	adcs	r0, r0
 8000592:	eb41 0101 	adc.w	r1, r1, r1
 8000596:	3c01      	subs	r4, #1
 8000598:	bf28      	it	cs
 800059a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800059e:	d2e9      	bcs.n	8000574 <__adddf3+0x10c>
 80005a0:	f091 0f00 	teq	r1, #0
 80005a4:	bf04      	itt	eq
 80005a6:	4601      	moveq	r1, r0
 80005a8:	2000      	moveq	r0, #0
 80005aa:	fab1 f381 	clz	r3, r1
 80005ae:	bf08      	it	eq
 80005b0:	3320      	addeq	r3, #32
 80005b2:	f1a3 030b 	sub.w	r3, r3, #11
 80005b6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ba:	da0c      	bge.n	80005d6 <__adddf3+0x16e>
 80005bc:	320c      	adds	r2, #12
 80005be:	dd08      	ble.n	80005d2 <__adddf3+0x16a>
 80005c0:	f102 0c14 	add.w	ip, r2, #20
 80005c4:	f1c2 020c 	rsb	r2, r2, #12
 80005c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005cc:	fa21 f102 	lsr.w	r1, r1, r2
 80005d0:	e00c      	b.n	80005ec <__adddf3+0x184>
 80005d2:	f102 0214 	add.w	r2, r2, #20
 80005d6:	bfd8      	it	le
 80005d8:	f1c2 0c20 	rsble	ip, r2, #32
 80005dc:	fa01 f102 	lsl.w	r1, r1, r2
 80005e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005e4:	bfdc      	itt	le
 80005e6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ea:	4090      	lslle	r0, r2
 80005ec:	1ae4      	subs	r4, r4, r3
 80005ee:	bfa2      	ittt	ge
 80005f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005f4:	4329      	orrge	r1, r5
 80005f6:	bd30      	popge	{r4, r5, pc}
 80005f8:	ea6f 0404 	mvn.w	r4, r4
 80005fc:	3c1f      	subs	r4, #31
 80005fe:	da1c      	bge.n	800063a <__adddf3+0x1d2>
 8000600:	340c      	adds	r4, #12
 8000602:	dc0e      	bgt.n	8000622 <__adddf3+0x1ba>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0220 	rsb	r2, r4, #32
 800060c:	fa20 f004 	lsr.w	r0, r0, r4
 8000610:	fa01 f302 	lsl.w	r3, r1, r2
 8000614:	ea40 0003 	orr.w	r0, r0, r3
 8000618:	fa21 f304 	lsr.w	r3, r1, r4
 800061c:	ea45 0103 	orr.w	r1, r5, r3
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f1c4 040c 	rsb	r4, r4, #12
 8000626:	f1c4 0220 	rsb	r2, r4, #32
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 f304 	lsl.w	r3, r1, r4
 8000632:	ea40 0003 	orr.w	r0, r0, r3
 8000636:	4629      	mov	r1, r5
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	fa21 f004 	lsr.w	r0, r1, r4
 800063e:	4629      	mov	r1, r5
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f094 0f00 	teq	r4, #0
 8000646:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800064a:	bf06      	itte	eq
 800064c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000650:	3401      	addeq	r4, #1
 8000652:	3d01      	subne	r5, #1
 8000654:	e74e      	b.n	80004f4 <__adddf3+0x8c>
 8000656:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800065a:	bf18      	it	ne
 800065c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000660:	d029      	beq.n	80006b6 <__adddf3+0x24e>
 8000662:	ea94 0f05 	teq	r4, r5
 8000666:	bf08      	it	eq
 8000668:	ea90 0f02 	teqeq	r0, r2
 800066c:	d005      	beq.n	800067a <__adddf3+0x212>
 800066e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000672:	bf04      	itt	eq
 8000674:	4619      	moveq	r1, r3
 8000676:	4610      	moveq	r0, r2
 8000678:	bd30      	pop	{r4, r5, pc}
 800067a:	ea91 0f03 	teq	r1, r3
 800067e:	bf1e      	ittt	ne
 8000680:	2100      	movne	r1, #0
 8000682:	2000      	movne	r0, #0
 8000684:	bd30      	popne	{r4, r5, pc}
 8000686:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800068a:	d105      	bne.n	8000698 <__adddf3+0x230>
 800068c:	0040      	lsls	r0, r0, #1
 800068e:	4149      	adcs	r1, r1
 8000690:	bf28      	it	cs
 8000692:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd30      	pop	{r4, r5, pc}
 8000698:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800069c:	bf3c      	itt	cc
 800069e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006a2:	bd30      	popcc	{r4, r5, pc}
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006b0:	f04f 0000 	mov.w	r0, #0
 80006b4:	bd30      	pop	{r4, r5, pc}
 80006b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ba:	bf1a      	itte	ne
 80006bc:	4619      	movne	r1, r3
 80006be:	4610      	movne	r0, r2
 80006c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006c4:	bf1c      	itt	ne
 80006c6:	460b      	movne	r3, r1
 80006c8:	4602      	movne	r2, r0
 80006ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ce:	bf06      	itte	eq
 80006d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006d4:	ea91 0f03 	teqeq	r1, r3
 80006d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	bf00      	nop

080006e0 <__aeabi_ui2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f4:	f04f 0500 	mov.w	r5, #0
 80006f8:	f04f 0100 	mov.w	r1, #0
 80006fc:	e750      	b.n	80005a0 <__adddf3+0x138>
 80006fe:	bf00      	nop

08000700 <__aeabi_i2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000714:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000718:	bf48      	it	mi
 800071a:	4240      	negmi	r0, r0
 800071c:	f04f 0100 	mov.w	r1, #0
 8000720:	e73e      	b.n	80005a0 <__adddf3+0x138>
 8000722:	bf00      	nop

08000724 <__aeabi_f2d>:
 8000724:	0042      	lsls	r2, r0, #1
 8000726:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800072a:	ea4f 0131 	mov.w	r1, r1, rrx
 800072e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000732:	bf1f      	itttt	ne
 8000734:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000738:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800073c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000740:	4770      	bxne	lr
 8000742:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000746:	bf08      	it	eq
 8000748:	4770      	bxeq	lr
 800074a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800074e:	bf04      	itt	eq
 8000750:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000754:	4770      	bxeq	lr
 8000756:	b530      	push	{r4, r5, lr}
 8000758:	f44f 7460 	mov.w	r4, #896	; 0x380
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	e71c      	b.n	80005a0 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_ul2d>:
 8000768:	ea50 0201 	orrs.w	r2, r0, r1
 800076c:	bf08      	it	eq
 800076e:	4770      	bxeq	lr
 8000770:	b530      	push	{r4, r5, lr}
 8000772:	f04f 0500 	mov.w	r5, #0
 8000776:	e00a      	b.n	800078e <__aeabi_l2d+0x16>

08000778 <__aeabi_l2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000786:	d502      	bpl.n	800078e <__aeabi_l2d+0x16>
 8000788:	4240      	negs	r0, r0
 800078a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000792:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000796:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800079a:	f43f aed8 	beq.w	800054e <__adddf3+0xe6>
 800079e:	f04f 0203 	mov.w	r2, #3
 80007a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a6:	bf18      	it	ne
 80007a8:	3203      	addne	r2, #3
 80007aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ae:	bf18      	it	ne
 80007b0:	3203      	addne	r2, #3
 80007b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007b6:	f1c2 0320 	rsb	r3, r2, #32
 80007ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80007be:	fa20 f002 	lsr.w	r0, r0, r2
 80007c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007c6:	ea40 000e 	orr.w	r0, r0, lr
 80007ca:	fa21 f102 	lsr.w	r1, r1, r2
 80007ce:	4414      	add	r4, r2
 80007d0:	e6bd      	b.n	800054e <__adddf3+0xe6>
 80007d2:	bf00      	nop

080007d4 <__aeabi_d2uiz>:
 80007d4:	004a      	lsls	r2, r1, #1
 80007d6:	d211      	bcs.n	80007fc <__aeabi_d2uiz+0x28>
 80007d8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007dc:	d211      	bcs.n	8000802 <__aeabi_d2uiz+0x2e>
 80007de:	d50d      	bpl.n	80007fc <__aeabi_d2uiz+0x28>
 80007e0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007e4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007e8:	d40e      	bmi.n	8000808 <__aeabi_d2uiz+0x34>
 80007ea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007f2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007f6:	fa23 f002 	lsr.w	r0, r3, r2
 80007fa:	4770      	bx	lr
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	4770      	bx	lr
 8000802:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000806:	d102      	bne.n	800080e <__aeabi_d2uiz+0x3a>
 8000808:	f04f 30ff 	mov.w	r0, #4294967295
 800080c:	4770      	bx	lr
 800080e:	f04f 0000 	mov.w	r0, #0
 8000812:	4770      	bx	lr

08000814 <__aeabi_d2f>:
 8000814:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000818:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800081c:	bf24      	itt	cs
 800081e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000822:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000826:	d90d      	bls.n	8000844 <__aeabi_d2f+0x30>
 8000828:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800082c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000830:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000834:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000838:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800083c:	bf08      	it	eq
 800083e:	f020 0001 	biceq.w	r0, r0, #1
 8000842:	4770      	bx	lr
 8000844:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000848:	d121      	bne.n	800088e <__aeabi_d2f+0x7a>
 800084a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800084e:	bfbc      	itt	lt
 8000850:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000854:	4770      	bxlt	lr
 8000856:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800085a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800085e:	f1c2 0218 	rsb	r2, r2, #24
 8000862:	f1c2 0c20 	rsb	ip, r2, #32
 8000866:	fa10 f30c 	lsls.w	r3, r0, ip
 800086a:	fa20 f002 	lsr.w	r0, r0, r2
 800086e:	bf18      	it	ne
 8000870:	f040 0001 	orrne.w	r0, r0, #1
 8000874:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000878:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800087c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000880:	ea40 000c 	orr.w	r0, r0, ip
 8000884:	fa23 f302 	lsr.w	r3, r3, r2
 8000888:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800088c:	e7cc      	b.n	8000828 <__aeabi_d2f+0x14>
 800088e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000892:	d107      	bne.n	80008a4 <__aeabi_d2f+0x90>
 8000894:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000898:	bf1e      	ittt	ne
 800089a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800089e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008a2:	4770      	bxne	lr
 80008a4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80008a8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008ac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop

080008b4 <__aeabi_uldivmod>:
 80008b4:	b953      	cbnz	r3, 80008cc <__aeabi_uldivmod+0x18>
 80008b6:	b94a      	cbnz	r2, 80008cc <__aeabi_uldivmod+0x18>
 80008b8:	2900      	cmp	r1, #0
 80008ba:	bf08      	it	eq
 80008bc:	2800      	cmpeq	r0, #0
 80008be:	bf1c      	itt	ne
 80008c0:	f04f 31ff 	movne.w	r1, #4294967295
 80008c4:	f04f 30ff 	movne.w	r0, #4294967295
 80008c8:	f000 b974 	b.w	8000bb4 <__aeabi_idiv0>
 80008cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80008d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008d4:	f000 f806 	bl	80008e4 <__udivmoddi4>
 80008d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008e0:	b004      	add	sp, #16
 80008e2:	4770      	bx	lr

080008e4 <__udivmoddi4>:
 80008e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008e8:	9d08      	ldr	r5, [sp, #32]
 80008ea:	4604      	mov	r4, r0
 80008ec:	468e      	mov	lr, r1
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d14d      	bne.n	800098e <__udivmoddi4+0xaa>
 80008f2:	428a      	cmp	r2, r1
 80008f4:	4694      	mov	ip, r2
 80008f6:	d969      	bls.n	80009cc <__udivmoddi4+0xe8>
 80008f8:	fab2 f282 	clz	r2, r2
 80008fc:	b152      	cbz	r2, 8000914 <__udivmoddi4+0x30>
 80008fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000902:	f1c2 0120 	rsb	r1, r2, #32
 8000906:	fa20 f101 	lsr.w	r1, r0, r1
 800090a:	fa0c fc02 	lsl.w	ip, ip, r2
 800090e:	ea41 0e03 	orr.w	lr, r1, r3
 8000912:	4094      	lsls	r4, r2
 8000914:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000918:	0c21      	lsrs	r1, r4, #16
 800091a:	fbbe f6f8 	udiv	r6, lr, r8
 800091e:	fa1f f78c 	uxth.w	r7, ip
 8000922:	fb08 e316 	mls	r3, r8, r6, lr
 8000926:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800092a:	fb06 f107 	mul.w	r1, r6, r7
 800092e:	4299      	cmp	r1, r3
 8000930:	d90a      	bls.n	8000948 <__udivmoddi4+0x64>
 8000932:	eb1c 0303 	adds.w	r3, ip, r3
 8000936:	f106 30ff 	add.w	r0, r6, #4294967295
 800093a:	f080 811f 	bcs.w	8000b7c <__udivmoddi4+0x298>
 800093e:	4299      	cmp	r1, r3
 8000940:	f240 811c 	bls.w	8000b7c <__udivmoddi4+0x298>
 8000944:	3e02      	subs	r6, #2
 8000946:	4463      	add	r3, ip
 8000948:	1a5b      	subs	r3, r3, r1
 800094a:	b2a4      	uxth	r4, r4
 800094c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000950:	fb08 3310 	mls	r3, r8, r0, r3
 8000954:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000958:	fb00 f707 	mul.w	r7, r0, r7
 800095c:	42a7      	cmp	r7, r4
 800095e:	d90a      	bls.n	8000976 <__udivmoddi4+0x92>
 8000960:	eb1c 0404 	adds.w	r4, ip, r4
 8000964:	f100 33ff 	add.w	r3, r0, #4294967295
 8000968:	f080 810a 	bcs.w	8000b80 <__udivmoddi4+0x29c>
 800096c:	42a7      	cmp	r7, r4
 800096e:	f240 8107 	bls.w	8000b80 <__udivmoddi4+0x29c>
 8000972:	4464      	add	r4, ip
 8000974:	3802      	subs	r0, #2
 8000976:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800097a:	1be4      	subs	r4, r4, r7
 800097c:	2600      	movs	r6, #0
 800097e:	b11d      	cbz	r5, 8000988 <__udivmoddi4+0xa4>
 8000980:	40d4      	lsrs	r4, r2
 8000982:	2300      	movs	r3, #0
 8000984:	e9c5 4300 	strd	r4, r3, [r5]
 8000988:	4631      	mov	r1, r6
 800098a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800098e:	428b      	cmp	r3, r1
 8000990:	d909      	bls.n	80009a6 <__udivmoddi4+0xc2>
 8000992:	2d00      	cmp	r5, #0
 8000994:	f000 80ef 	beq.w	8000b76 <__udivmoddi4+0x292>
 8000998:	2600      	movs	r6, #0
 800099a:	e9c5 0100 	strd	r0, r1, [r5]
 800099e:	4630      	mov	r0, r6
 80009a0:	4631      	mov	r1, r6
 80009a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009a6:	fab3 f683 	clz	r6, r3
 80009aa:	2e00      	cmp	r6, #0
 80009ac:	d14a      	bne.n	8000a44 <__udivmoddi4+0x160>
 80009ae:	428b      	cmp	r3, r1
 80009b0:	d302      	bcc.n	80009b8 <__udivmoddi4+0xd4>
 80009b2:	4282      	cmp	r2, r0
 80009b4:	f200 80f9 	bhi.w	8000baa <__udivmoddi4+0x2c6>
 80009b8:	1a84      	subs	r4, r0, r2
 80009ba:	eb61 0303 	sbc.w	r3, r1, r3
 80009be:	2001      	movs	r0, #1
 80009c0:	469e      	mov	lr, r3
 80009c2:	2d00      	cmp	r5, #0
 80009c4:	d0e0      	beq.n	8000988 <__udivmoddi4+0xa4>
 80009c6:	e9c5 4e00 	strd	r4, lr, [r5]
 80009ca:	e7dd      	b.n	8000988 <__udivmoddi4+0xa4>
 80009cc:	b902      	cbnz	r2, 80009d0 <__udivmoddi4+0xec>
 80009ce:	deff      	udf	#255	; 0xff
 80009d0:	fab2 f282 	clz	r2, r2
 80009d4:	2a00      	cmp	r2, #0
 80009d6:	f040 8092 	bne.w	8000afe <__udivmoddi4+0x21a>
 80009da:	eba1 010c 	sub.w	r1, r1, ip
 80009de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009e2:	fa1f fe8c 	uxth.w	lr, ip
 80009e6:	2601      	movs	r6, #1
 80009e8:	0c20      	lsrs	r0, r4, #16
 80009ea:	fbb1 f3f7 	udiv	r3, r1, r7
 80009ee:	fb07 1113 	mls	r1, r7, r3, r1
 80009f2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009f6:	fb0e f003 	mul.w	r0, lr, r3
 80009fa:	4288      	cmp	r0, r1
 80009fc:	d908      	bls.n	8000a10 <__udivmoddi4+0x12c>
 80009fe:	eb1c 0101 	adds.w	r1, ip, r1
 8000a02:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a06:	d202      	bcs.n	8000a0e <__udivmoddi4+0x12a>
 8000a08:	4288      	cmp	r0, r1
 8000a0a:	f200 80cb 	bhi.w	8000ba4 <__udivmoddi4+0x2c0>
 8000a0e:	4643      	mov	r3, r8
 8000a10:	1a09      	subs	r1, r1, r0
 8000a12:	b2a4      	uxth	r4, r4
 8000a14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a18:	fb07 1110 	mls	r1, r7, r0, r1
 8000a1c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a20:	fb0e fe00 	mul.w	lr, lr, r0
 8000a24:	45a6      	cmp	lr, r4
 8000a26:	d908      	bls.n	8000a3a <__udivmoddi4+0x156>
 8000a28:	eb1c 0404 	adds.w	r4, ip, r4
 8000a2c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a30:	d202      	bcs.n	8000a38 <__udivmoddi4+0x154>
 8000a32:	45a6      	cmp	lr, r4
 8000a34:	f200 80bb 	bhi.w	8000bae <__udivmoddi4+0x2ca>
 8000a38:	4608      	mov	r0, r1
 8000a3a:	eba4 040e 	sub.w	r4, r4, lr
 8000a3e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a42:	e79c      	b.n	800097e <__udivmoddi4+0x9a>
 8000a44:	f1c6 0720 	rsb	r7, r6, #32
 8000a48:	40b3      	lsls	r3, r6
 8000a4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a52:	fa20 f407 	lsr.w	r4, r0, r7
 8000a56:	fa01 f306 	lsl.w	r3, r1, r6
 8000a5a:	431c      	orrs	r4, r3
 8000a5c:	40f9      	lsrs	r1, r7
 8000a5e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a62:	fa00 f306 	lsl.w	r3, r0, r6
 8000a66:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a6a:	0c20      	lsrs	r0, r4, #16
 8000a6c:	fa1f fe8c 	uxth.w	lr, ip
 8000a70:	fb09 1118 	mls	r1, r9, r8, r1
 8000a74:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a78:	fb08 f00e 	mul.w	r0, r8, lr
 8000a7c:	4288      	cmp	r0, r1
 8000a7e:	fa02 f206 	lsl.w	r2, r2, r6
 8000a82:	d90b      	bls.n	8000a9c <__udivmoddi4+0x1b8>
 8000a84:	eb1c 0101 	adds.w	r1, ip, r1
 8000a88:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a8c:	f080 8088 	bcs.w	8000ba0 <__udivmoddi4+0x2bc>
 8000a90:	4288      	cmp	r0, r1
 8000a92:	f240 8085 	bls.w	8000ba0 <__udivmoddi4+0x2bc>
 8000a96:	f1a8 0802 	sub.w	r8, r8, #2
 8000a9a:	4461      	add	r1, ip
 8000a9c:	1a09      	subs	r1, r1, r0
 8000a9e:	b2a4      	uxth	r4, r4
 8000aa0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000aa4:	fb09 1110 	mls	r1, r9, r0, r1
 8000aa8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000aac:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ab0:	458e      	cmp	lr, r1
 8000ab2:	d908      	bls.n	8000ac6 <__udivmoddi4+0x1e2>
 8000ab4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ab8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000abc:	d26c      	bcs.n	8000b98 <__udivmoddi4+0x2b4>
 8000abe:	458e      	cmp	lr, r1
 8000ac0:	d96a      	bls.n	8000b98 <__udivmoddi4+0x2b4>
 8000ac2:	3802      	subs	r0, #2
 8000ac4:	4461      	add	r1, ip
 8000ac6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000aca:	fba0 9402 	umull	r9, r4, r0, r2
 8000ace:	eba1 010e 	sub.w	r1, r1, lr
 8000ad2:	42a1      	cmp	r1, r4
 8000ad4:	46c8      	mov	r8, r9
 8000ad6:	46a6      	mov	lr, r4
 8000ad8:	d356      	bcc.n	8000b88 <__udivmoddi4+0x2a4>
 8000ada:	d053      	beq.n	8000b84 <__udivmoddi4+0x2a0>
 8000adc:	b15d      	cbz	r5, 8000af6 <__udivmoddi4+0x212>
 8000ade:	ebb3 0208 	subs.w	r2, r3, r8
 8000ae2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ae6:	fa01 f707 	lsl.w	r7, r1, r7
 8000aea:	fa22 f306 	lsr.w	r3, r2, r6
 8000aee:	40f1      	lsrs	r1, r6
 8000af0:	431f      	orrs	r7, r3
 8000af2:	e9c5 7100 	strd	r7, r1, [r5]
 8000af6:	2600      	movs	r6, #0
 8000af8:	4631      	mov	r1, r6
 8000afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000afe:	f1c2 0320 	rsb	r3, r2, #32
 8000b02:	40d8      	lsrs	r0, r3
 8000b04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b08:	fa21 f303 	lsr.w	r3, r1, r3
 8000b0c:	4091      	lsls	r1, r2
 8000b0e:	4301      	orrs	r1, r0
 8000b10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b14:	fa1f fe8c 	uxth.w	lr, ip
 8000b18:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b1c:	fb07 3610 	mls	r6, r7, r0, r3
 8000b20:	0c0b      	lsrs	r3, r1, #16
 8000b22:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b26:	fb00 f60e 	mul.w	r6, r0, lr
 8000b2a:	429e      	cmp	r6, r3
 8000b2c:	fa04 f402 	lsl.w	r4, r4, r2
 8000b30:	d908      	bls.n	8000b44 <__udivmoddi4+0x260>
 8000b32:	eb1c 0303 	adds.w	r3, ip, r3
 8000b36:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b3a:	d22f      	bcs.n	8000b9c <__udivmoddi4+0x2b8>
 8000b3c:	429e      	cmp	r6, r3
 8000b3e:	d92d      	bls.n	8000b9c <__udivmoddi4+0x2b8>
 8000b40:	3802      	subs	r0, #2
 8000b42:	4463      	add	r3, ip
 8000b44:	1b9b      	subs	r3, r3, r6
 8000b46:	b289      	uxth	r1, r1
 8000b48:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b4c:	fb07 3316 	mls	r3, r7, r6, r3
 8000b50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b54:	fb06 f30e 	mul.w	r3, r6, lr
 8000b58:	428b      	cmp	r3, r1
 8000b5a:	d908      	bls.n	8000b6e <__udivmoddi4+0x28a>
 8000b5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b60:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b64:	d216      	bcs.n	8000b94 <__udivmoddi4+0x2b0>
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d914      	bls.n	8000b94 <__udivmoddi4+0x2b0>
 8000b6a:	3e02      	subs	r6, #2
 8000b6c:	4461      	add	r1, ip
 8000b6e:	1ac9      	subs	r1, r1, r3
 8000b70:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b74:	e738      	b.n	80009e8 <__udivmoddi4+0x104>
 8000b76:	462e      	mov	r6, r5
 8000b78:	4628      	mov	r0, r5
 8000b7a:	e705      	b.n	8000988 <__udivmoddi4+0xa4>
 8000b7c:	4606      	mov	r6, r0
 8000b7e:	e6e3      	b.n	8000948 <__udivmoddi4+0x64>
 8000b80:	4618      	mov	r0, r3
 8000b82:	e6f8      	b.n	8000976 <__udivmoddi4+0x92>
 8000b84:	454b      	cmp	r3, r9
 8000b86:	d2a9      	bcs.n	8000adc <__udivmoddi4+0x1f8>
 8000b88:	ebb9 0802 	subs.w	r8, r9, r2
 8000b8c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b90:	3801      	subs	r0, #1
 8000b92:	e7a3      	b.n	8000adc <__udivmoddi4+0x1f8>
 8000b94:	4646      	mov	r6, r8
 8000b96:	e7ea      	b.n	8000b6e <__udivmoddi4+0x28a>
 8000b98:	4620      	mov	r0, r4
 8000b9a:	e794      	b.n	8000ac6 <__udivmoddi4+0x1e2>
 8000b9c:	4640      	mov	r0, r8
 8000b9e:	e7d1      	b.n	8000b44 <__udivmoddi4+0x260>
 8000ba0:	46d0      	mov	r8, sl
 8000ba2:	e77b      	b.n	8000a9c <__udivmoddi4+0x1b8>
 8000ba4:	3b02      	subs	r3, #2
 8000ba6:	4461      	add	r1, ip
 8000ba8:	e732      	b.n	8000a10 <__udivmoddi4+0x12c>
 8000baa:	4630      	mov	r0, r6
 8000bac:	e709      	b.n	80009c2 <__udivmoddi4+0xde>
 8000bae:	4464      	add	r4, ip
 8000bb0:	3802      	subs	r0, #2
 8000bb2:	e742      	b.n	8000a3a <__udivmoddi4+0x156>

08000bb4 <__aeabi_idiv0>:
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b0e8      	sub	sp, #416	; 0x1a0
 8000bbc:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	// Defining an array with sine wave values.
	uint16_t valuesBuffer[NO_OF_SAMPLES], value;
	for (uint16_t i = 0; i < NO_OF_SAMPLES; i++) {
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	f8a7 3196 	strh.w	r3, [r7, #406]	; 0x196
 8000bc4:	e046      	b.n	8000c54 <main+0x9c>
		value = (uint16_t) rint( (sinf( ((2*PI)/NO_OF_SAMPLES)*i) + 1 )*2048 );
 8000bc6:	f8b7 3196 	ldrh.w	r3, [r7, #406]	; 0x196
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f7ff fd98 	bl	8000700 <__aeabi_i2d>
 8000bd0:	a332      	add	r3, pc, #200	; (adr r3, 8000c9c <main+0xe4>)
 8000bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bd6:	f7ff fb17 	bl	8000208 <__aeabi_dmul>
 8000bda:	4602      	mov	r2, r0
 8000bdc:	460b      	mov	r3, r1
 8000bde:	4610      	mov	r0, r2
 8000be0:	4619      	mov	r1, r3
 8000be2:	f7ff fe17 	bl	8000814 <__aeabi_d2f>
 8000be6:	4603      	mov	r3, r0
 8000be8:	ee00 3a10 	vmov	s0, r3
 8000bec:	f002 faac 	bl	8003148 <sinf>
 8000bf0:	eef0 7a40 	vmov.f32	s15, s0
 8000bf4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000bf8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000bfc:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8000c90 <main+0xd8>
 8000c00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c04:	ee17 0a90 	vmov	r0, s15
 8000c08:	f7ff fd8c 	bl	8000724 <__aeabi_f2d>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	460b      	mov	r3, r1
 8000c10:	ec43 2b10 	vmov	d0, r2, r3
 8000c14:	f002 fa0a 	bl	800302c <rint>
 8000c18:	ec53 2b10 	vmov	r2, r3, d0
 8000c1c:	4610      	mov	r0, r2
 8000c1e:	4619      	mov	r1, r3
 8000c20:	f7ff fdd8 	bl	80007d4 <__aeabi_d2uiz>
 8000c24:	4603      	mov	r3, r0
 8000c26:	f8a7 3194 	strh.w	r3, [r7, #404]	; 0x194
		valuesBuffer[i] = value < 4096 ? value : 4095;
 8000c2a:	f8b7 2196 	ldrh.w	r2, [r7, #406]	; 0x196
 8000c2e:	f8b7 3194 	ldrh.w	r3, [r7, #404]	; 0x194
 8000c32:	f640 71ff 	movw	r1, #4095	; 0xfff
 8000c36:	428b      	cmp	r3, r1
 8000c38:	bf28      	it	cs
 8000c3a:	460b      	movcs	r3, r1
 8000c3c:	b299      	uxth	r1, r3
 8000c3e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8000c42:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8000c46:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (uint16_t i = 0; i < NO_OF_SAMPLES; i++) {
 8000c4a:	f8b7 3196 	ldrh.w	r3, [r7, #406]	; 0x196
 8000c4e:	3301      	adds	r3, #1
 8000c50:	f8a7 3196 	strh.w	r3, [r7, #406]	; 0x196
 8000c54:	f8b7 3196 	ldrh.w	r3, [r7, #406]	; 0x196
 8000c58:	2bc7      	cmp	r3, #199	; 0xc7
 8000c5a:	d9b4      	bls.n	8000bc6 <main+0xe>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c5c:	f000 fac0 	bl	80011e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c60:	f000 f820 	bl	8000ca4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c64:	f000 f8fc 	bl	8000e60 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c68:	f000 f8da 	bl	8000e20 <MX_DMA_Init>
  MX_DAC_Init();
 8000c6c:	f000 f878 	bl	8000d60 <MX_DAC_Init>
  MX_TIM6_Init();
 8000c70:	f000 f8a0 	bl	8000db4 <MX_TIM6_Init>

//  // <-- using Polling Mode -->
//  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);	// for Polling Mode

  // <-- using DMA Mode -->
  HAL_TIM_Base_Start(&htim6);	// for DMA Mode
 8000c74:	4807      	ldr	r0, [pc, #28]	; (8000c94 <main+0xdc>)
 8000c76:	f001 ff61 	bl	8002b3c <HAL_TIM_Base_Start>
  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)valuesBuffer, NO_OF_SAMPLES, DAC_ALIGN_12B_R);	// for DMA Mode
 8000c7a:	1d3a      	adds	r2, r7, #4
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	9300      	str	r3, [sp, #0]
 8000c80:	23c8      	movs	r3, #200	; 0xc8
 8000c82:	2100      	movs	r1, #0
 8000c84:	4804      	ldr	r0, [pc, #16]	; (8000c98 <main+0xe0>)
 8000c86:	f000 fc51 	bl	800152c <HAL_DAC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c8a:	e7fe      	b.n	8000c8a <main+0xd2>
 8000c8c:	f3af 8000 	nop.w
 8000c90:	45000000 	.word	0x45000000
 8000c94:	2000009c 	.word	0x2000009c
 8000c98:	20000028 	.word	0x20000028
 8000c9c:	ae261898 	.word	0xae261898
 8000ca0:	3fa015be 	.word	0x3fa015be

08000ca4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b094      	sub	sp, #80	; 0x50
 8000ca8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000caa:	f107 031c 	add.w	r3, r7, #28
 8000cae:	2234      	movs	r2, #52	; 0x34
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f002 f9b2 	bl	800301c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb8:	f107 0308 	add.w	r3, r7, #8
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc8:	2300      	movs	r3, #0
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	4b22      	ldr	r3, [pc, #136]	; (8000d58 <SystemClock_Config+0xb4>)
 8000cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd0:	4a21      	ldr	r2, [pc, #132]	; (8000d58 <SystemClock_Config+0xb4>)
 8000cd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd6:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd8:	4b1f      	ldr	r3, [pc, #124]	; (8000d58 <SystemClock_Config+0xb4>)
 8000cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce0:	607b      	str	r3, [r7, #4]
 8000ce2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	603b      	str	r3, [r7, #0]
 8000ce8:	4b1c      	ldr	r3, [pc, #112]	; (8000d5c <SystemClock_Config+0xb8>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a1b      	ldr	r2, [pc, #108]	; (8000d5c <SystemClock_Config+0xb8>)
 8000cee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cf2:	6013      	str	r3, [r2, #0]
 8000cf4:	4b19      	ldr	r3, [pc, #100]	; (8000d5c <SystemClock_Config+0xb8>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cfc:	603b      	str	r3, [r7, #0]
 8000cfe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d00:	2302      	movs	r3, #2
 8000d02:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d04:	2301      	movs	r3, #1
 8000d06:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d08:	2310      	movs	r3, #16
 8000d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d10:	f107 031c 	add.w	r3, r7, #28
 8000d14:	4618      	mov	r0, r3
 8000d16:	f001 fc3d 	bl	8002594 <HAL_RCC_OscConfig>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000d20:	f000 f90a 	bl	8000f38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d24:	230f      	movs	r3, #15
 8000d26:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d34:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d3a:	f107 0308 	add.w	r3, r7, #8
 8000d3e:	2100      	movs	r1, #0
 8000d40:	4618      	mov	r0, r3
 8000d42:	f001 fa3b 	bl	80021bc <HAL_RCC_ClockConfig>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000d4c:	f000 f8f4 	bl	8000f38 <Error_Handler>
  }
}
 8000d50:	bf00      	nop
 8000d52:	3750      	adds	r7, #80	; 0x50
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40023800 	.word	0x40023800
 8000d5c:	40007000 	.word	0x40007000

08000d60 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000d66:	463b      	mov	r3, r7
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000d6e:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <MX_DAC_Init+0x4c>)
 8000d70:	4a0f      	ldr	r2, [pc, #60]	; (8000db0 <MX_DAC_Init+0x50>)
 8000d72:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000d74:	480d      	ldr	r0, [pc, #52]	; (8000dac <MX_DAC_Init+0x4c>)
 8000d76:	f000 fbb6 	bl	80014e6 <HAL_DAC_Init>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000d80:	f000 f8da 	bl	8000f38 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000d84:	2304      	movs	r3, #4
 8000d86:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000d8c:	463b      	mov	r3, r7
 8000d8e:	2200      	movs	r2, #0
 8000d90:	4619      	mov	r1, r3
 8000d92:	4806      	ldr	r0, [pc, #24]	; (8000dac <MX_DAC_Init+0x4c>)
 8000d94:	f000 fca9 	bl	80016ea <HAL_DAC_ConfigChannel>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000d9e:	f000 f8cb 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000028 	.word	0x20000028
 8000db0:	40007400 	.word	0x40007400

08000db4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dba:	463b      	mov	r3, r7
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000dc2:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <MX_TIM6_Init+0x64>)
 8000dc4:	4a15      	ldr	r2, [pc, #84]	; (8000e1c <MX_TIM6_Init+0x68>)
 8000dc6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000dc8:	4b13      	ldr	r3, [pc, #76]	; (8000e18 <MX_TIM6_Init+0x64>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dce:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <MX_TIM6_Init+0x64>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000dd4:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <MX_TIM6_Init+0x64>)
 8000dd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dda:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ddc:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <MX_TIM6_Init+0x64>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000de2:	480d      	ldr	r0, [pc, #52]	; (8000e18 <MX_TIM6_Init+0x64>)
 8000de4:	f001 fe5a 	bl	8002a9c <HAL_TIM_Base_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000dee:	f000 f8a3 	bl	8000f38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000df2:	2320      	movs	r3, #32
 8000df4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df6:	2300      	movs	r3, #0
 8000df8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4806      	ldr	r0, [pc, #24]	; (8000e18 <MX_TIM6_Init+0x64>)
 8000e00:	f002 f87a 	bl	8002ef8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000e0a:	f000 f895 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	2000009c 	.word	0x2000009c
 8000e1c:	40001000 	.word	0x40001000

08000e20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	607b      	str	r3, [r7, #4]
 8000e2a:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <MX_DMA_Init+0x3c>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	4a0b      	ldr	r2, [pc, #44]	; (8000e5c <MX_DMA_Init+0x3c>)
 8000e30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e34:	6313      	str	r3, [r2, #48]	; 0x30
 8000e36:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <MX_DMA_Init+0x3c>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e3e:	607b      	str	r3, [r7, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2100      	movs	r1, #0
 8000e46:	2010      	movs	r0, #16
 8000e48:	f000 fb17 	bl	800147a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000e4c:	2010      	movs	r0, #16
 8000e4e:	f000 fb30 	bl	80014b2 <HAL_NVIC_EnableIRQ>

}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40023800 	.word	0x40023800

08000e60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08a      	sub	sp, #40	; 0x28
 8000e64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e66:	f107 0314 	add.w	r3, r7, #20
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	605a      	str	r2, [r3, #4]
 8000e70:	609a      	str	r2, [r3, #8]
 8000e72:	60da      	str	r2, [r3, #12]
 8000e74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]
 8000e7a:	4b2c      	ldr	r3, [pc, #176]	; (8000f2c <MX_GPIO_Init+0xcc>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	4a2b      	ldr	r2, [pc, #172]	; (8000f2c <MX_GPIO_Init+0xcc>)
 8000e80:	f043 0304 	orr.w	r3, r3, #4
 8000e84:	6313      	str	r3, [r2, #48]	; 0x30
 8000e86:	4b29      	ldr	r3, [pc, #164]	; (8000f2c <MX_GPIO_Init+0xcc>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f003 0304 	and.w	r3, r3, #4
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	4b25      	ldr	r3, [pc, #148]	; (8000f2c <MX_GPIO_Init+0xcc>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	4a24      	ldr	r2, [pc, #144]	; (8000f2c <MX_GPIO_Init+0xcc>)
 8000e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea2:	4b22      	ldr	r3, [pc, #136]	; (8000f2c <MX_GPIO_Init+0xcc>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60bb      	str	r3, [r7, #8]
 8000eb2:	4b1e      	ldr	r3, [pc, #120]	; (8000f2c <MX_GPIO_Init+0xcc>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	4a1d      	ldr	r2, [pc, #116]	; (8000f2c <MX_GPIO_Init+0xcc>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ebe:	4b1b      	ldr	r3, [pc, #108]	; (8000f2c <MX_GPIO_Init+0xcc>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	60bb      	str	r3, [r7, #8]
 8000ec8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	607b      	str	r3, [r7, #4]
 8000ece:	4b17      	ldr	r3, [pc, #92]	; (8000f2c <MX_GPIO_Init+0xcc>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	4a16      	ldr	r2, [pc, #88]	; (8000f2c <MX_GPIO_Init+0xcc>)
 8000ed4:	f043 0302 	orr.w	r3, r3, #2
 8000ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eda:	4b14      	ldr	r3, [pc, #80]	; (8000f2c <MX_GPIO_Init+0xcc>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	f003 0302 	and.w	r3, r3, #2
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ee6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000eec:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ef0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ef6:	f107 0314 	add.w	r3, r7, #20
 8000efa:	4619      	mov	r1, r3
 8000efc:	480c      	ldr	r0, [pc, #48]	; (8000f30 <MX_GPIO_Init+0xd0>)
 8000efe:	f000 ffe9 	bl	8001ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f02:	230c      	movs	r3, #12
 8000f04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f06:	2302      	movs	r3, #2
 8000f08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f12:	2307      	movs	r3, #7
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f16:	f107 0314 	add.w	r3, r7, #20
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4805      	ldr	r0, [pc, #20]	; (8000f34 <MX_GPIO_Init+0xd4>)
 8000f1e:	f000 ffd9 	bl	8001ed4 <HAL_GPIO_Init>

}
 8000f22:	bf00      	nop
 8000f24:	3728      	adds	r7, #40	; 0x28
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	40020800 	.word	0x40020800
 8000f34:	40020000 	.word	0x40020000

08000f38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f3c:	b672      	cpsid	i
}
 8000f3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f40:	e7fe      	b.n	8000f40 <Error_Handler+0x8>
	...

08000f44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	607b      	str	r3, [r7, #4]
 8000f4e:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <HAL_MspInit+0x4c>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f52:	4a0f      	ldr	r2, [pc, #60]	; (8000f90 <HAL_MspInit+0x4c>)
 8000f54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f58:	6453      	str	r3, [r2, #68]	; 0x44
 8000f5a:	4b0d      	ldr	r3, [pc, #52]	; (8000f90 <HAL_MspInit+0x4c>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	603b      	str	r3, [r7, #0]
 8000f6a:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <HAL_MspInit+0x4c>)
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6e:	4a08      	ldr	r2, [pc, #32]	; (8000f90 <HAL_MspInit+0x4c>)
 8000f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f74:	6413      	str	r3, [r2, #64]	; 0x40
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <HAL_MspInit+0x4c>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7e:	603b      	str	r3, [r7, #0]
 8000f80:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f82:	2007      	movs	r0, #7
 8000f84:	f000 fa6e 	bl	8001464 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f88:	bf00      	nop
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40023800 	.word	0x40023800

08000f94 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08a      	sub	sp, #40	; 0x28
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a33      	ldr	r2, [pc, #204]	; (8001080 <HAL_DAC_MspInit+0xec>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d160      	bne.n	8001078 <HAL_DAC_MspInit+0xe4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	613b      	str	r3, [r7, #16]
 8000fba:	4b32      	ldr	r3, [pc, #200]	; (8001084 <HAL_DAC_MspInit+0xf0>)
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbe:	4a31      	ldr	r2, [pc, #196]	; (8001084 <HAL_DAC_MspInit+0xf0>)
 8000fc0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc6:	4b2f      	ldr	r3, [pc, #188]	; (8001084 <HAL_DAC_MspInit+0xf0>)
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000fce:	613b      	str	r3, [r7, #16]
 8000fd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	4b2b      	ldr	r3, [pc, #172]	; (8001084 <HAL_DAC_MspInit+0xf0>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	4a2a      	ldr	r2, [pc, #168]	; (8001084 <HAL_DAC_MspInit+0xf0>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe2:	4b28      	ldr	r3, [pc, #160]	; (8001084 <HAL_DAC_MspInit+0xf0>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA5     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000fee:	2320      	movs	r3, #32
 8000ff0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffa:	f107 0314 	add.w	r3, r7, #20
 8000ffe:	4619      	mov	r1, r3
 8001000:	4821      	ldr	r0, [pc, #132]	; (8001088 <HAL_DAC_MspInit+0xf4>)
 8001002:	f000 ff67 	bl	8001ed4 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8001006:	4b21      	ldr	r3, [pc, #132]	; (800108c <HAL_DAC_MspInit+0xf8>)
 8001008:	4a21      	ldr	r2, [pc, #132]	; (8001090 <HAL_DAC_MspInit+0xfc>)
 800100a:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 800100c:	4b1f      	ldr	r3, [pc, #124]	; (800108c <HAL_DAC_MspInit+0xf8>)
 800100e:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001012:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001014:	4b1d      	ldr	r3, [pc, #116]	; (800108c <HAL_DAC_MspInit+0xf8>)
 8001016:	2240      	movs	r2, #64	; 0x40
 8001018:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 800101a:	4b1c      	ldr	r3, [pc, #112]	; (800108c <HAL_DAC_MspInit+0xf8>)
 800101c:	2200      	movs	r2, #0
 800101e:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001020:	4b1a      	ldr	r3, [pc, #104]	; (800108c <HAL_DAC_MspInit+0xf8>)
 8001022:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001026:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001028:	4b18      	ldr	r3, [pc, #96]	; (800108c <HAL_DAC_MspInit+0xf8>)
 800102a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800102e:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001030:	4b16      	ldr	r3, [pc, #88]	; (800108c <HAL_DAC_MspInit+0xf8>)
 8001032:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001036:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001038:	4b14      	ldr	r3, [pc, #80]	; (800108c <HAL_DAC_MspInit+0xf8>)
 800103a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800103e:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8001040:	4b12      	ldr	r3, [pc, #72]	; (800108c <HAL_DAC_MspInit+0xf8>)
 8001042:	2200      	movs	r2, #0
 8001044:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001046:	4b11      	ldr	r3, [pc, #68]	; (800108c <HAL_DAC_MspInit+0xf8>)
 8001048:	2200      	movs	r2, #0
 800104a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 800104c:	480f      	ldr	r0, [pc, #60]	; (800108c <HAL_DAC_MspInit+0xf8>)
 800104e:	f000 fbd1 	bl	80017f4 <HAL_DMA_Init>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 8001058:	f7ff ff6e 	bl	8000f38 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a0b      	ldr	r2, [pc, #44]	; (800108c <HAL_DAC_MspInit+0xf8>)
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	4a0a      	ldr	r2, [pc, #40]	; (800108c <HAL_DAC_MspInit+0xf8>)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001068:	2200      	movs	r2, #0
 800106a:	2100      	movs	r1, #0
 800106c:	2036      	movs	r0, #54	; 0x36
 800106e:	f000 fa04 	bl	800147a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001072:	2036      	movs	r0, #54	; 0x36
 8001074:	f000 fa1d 	bl	80014b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001078:	bf00      	nop
 800107a:	3728      	adds	r7, #40	; 0x28
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40007400 	.word	0x40007400
 8001084:	40023800 	.word	0x40023800
 8001088:	40020000 	.word	0x40020000
 800108c:	2000003c 	.word	0x2000003c
 8001090:	40026088 	.word	0x40026088

08001094 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a0e      	ldr	r2, [pc, #56]	; (80010dc <HAL_TIM_Base_MspInit+0x48>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d115      	bne.n	80010d2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	4b0d      	ldr	r3, [pc, #52]	; (80010e0 <HAL_TIM_Base_MspInit+0x4c>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	4a0c      	ldr	r2, [pc, #48]	; (80010e0 <HAL_TIM_Base_MspInit+0x4c>)
 80010b0:	f043 0310 	orr.w	r3, r3, #16
 80010b4:	6413      	str	r3, [r2, #64]	; 0x40
 80010b6:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <HAL_TIM_Base_MspInit+0x4c>)
 80010b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ba:	f003 0310 	and.w	r3, r3, #16
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80010c2:	2200      	movs	r2, #0
 80010c4:	2100      	movs	r1, #0
 80010c6:	2036      	movs	r0, #54	; 0x36
 80010c8:	f000 f9d7 	bl	800147a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80010cc:	2036      	movs	r0, #54	; 0x36
 80010ce:	f000 f9f0 	bl	80014b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80010d2:	bf00      	nop
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40001000 	.word	0x40001000
 80010e0:	40023800 	.word	0x40023800

080010e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <NMI_Handler+0x4>

080010ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ee:	e7fe      	b.n	80010ee <HardFault_Handler+0x4>

080010f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f4:	e7fe      	b.n	80010f4 <MemManage_Handler+0x4>

080010f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010fa:	e7fe      	b.n	80010fa <BusFault_Handler+0x4>

080010fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001100:	e7fe      	b.n	8001100 <UsageFault_Handler+0x4>

08001102 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001130:	f000 f8a8 	bl	8001284 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001134:	bf00      	nop
 8001136:	bd80      	pop	{r7, pc}

08001138 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 800113c:	4802      	ldr	r0, [pc, #8]	; (8001148 <DMA1_Stream5_IRQHandler+0x10>)
 800113e:	f000 fc5f 	bl	8001a00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	2000003c 	.word	0x2000003c

0800114c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC channel underrun error interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001150:	4803      	ldr	r0, [pc, #12]	; (8001160 <TIM6_DAC_IRQHandler+0x14>)
 8001152:	f001 fd39 	bl	8002bc8 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac);
 8001156:	4803      	ldr	r0, [pc, #12]	; (8001164 <TIM6_DAC_IRQHandler+0x18>)
 8001158:	f000 fa6e 	bl	8001638 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}
 8001160:	2000009c 	.word	0x2000009c
 8001164:	20000028 	.word	0x20000028

08001168 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800116c:	4b06      	ldr	r3, [pc, #24]	; (8001188 <SystemInit+0x20>)
 800116e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001172:	4a05      	ldr	r2, [pc, #20]	; (8001188 <SystemInit+0x20>)
 8001174:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001178:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 800118c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001190:	480d      	ldr	r0, [pc, #52]	; (80011c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001192:	490e      	ldr	r1, [pc, #56]	; (80011cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001194:	4a0e      	ldr	r2, [pc, #56]	; (80011d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001196:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001198:	e002      	b.n	80011a0 <LoopCopyDataInit>

0800119a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800119a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800119c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800119e:	3304      	adds	r3, #4

080011a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011a4:	d3f9      	bcc.n	800119a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011a6:	4a0b      	ldr	r2, [pc, #44]	; (80011d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011a8:	4c0b      	ldr	r4, [pc, #44]	; (80011d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011ac:	e001      	b.n	80011b2 <LoopFillZerobss>

080011ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011b0:	3204      	adds	r2, #4

080011b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011b4:	d3fb      	bcc.n	80011ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011b6:	f7ff ffd7 	bl	8001168 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011ba:	f001 ff0b 	bl	8002fd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011be:	f7ff fcfb 	bl	8000bb8 <main>
  bx  lr    
 80011c2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80011c4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80011c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011cc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80011d0:	08004020 	.word	0x08004020
  ldr r2, =_sbss
 80011d4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80011d8:	200000e8 	.word	0x200000e8

080011dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011dc:	e7fe      	b.n	80011dc <ADC_IRQHandler>
	...

080011e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011e4:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <HAL_Init+0x40>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a0d      	ldr	r2, [pc, #52]	; (8001220 <HAL_Init+0x40>)
 80011ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011f0:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <HAL_Init+0x40>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a0a      	ldr	r2, [pc, #40]	; (8001220 <HAL_Init+0x40>)
 80011f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011fc:	4b08      	ldr	r3, [pc, #32]	; (8001220 <HAL_Init+0x40>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a07      	ldr	r2, [pc, #28]	; (8001220 <HAL_Init+0x40>)
 8001202:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001206:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001208:	2003      	movs	r0, #3
 800120a:	f000 f92b 	bl	8001464 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800120e:	2000      	movs	r0, #0
 8001210:	f000 f808 	bl	8001224 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001214:	f7ff fe96 	bl	8000f44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40023c00 	.word	0x40023c00

08001224 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800122c:	4b12      	ldr	r3, [pc, #72]	; (8001278 <HAL_InitTick+0x54>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	4b12      	ldr	r3, [pc, #72]	; (800127c <HAL_InitTick+0x58>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	4619      	mov	r1, r3
 8001236:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800123a:	fbb3 f3f1 	udiv	r3, r3, r1
 800123e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001242:	4618      	mov	r0, r3
 8001244:	f000 f943 	bl	80014ce <HAL_SYSTICK_Config>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e00e      	b.n	8001270 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b0f      	cmp	r3, #15
 8001256:	d80a      	bhi.n	800126e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001258:	2200      	movs	r2, #0
 800125a:	6879      	ldr	r1, [r7, #4]
 800125c:	f04f 30ff 	mov.w	r0, #4294967295
 8001260:	f000 f90b 	bl	800147a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001264:	4a06      	ldr	r2, [pc, #24]	; (8001280 <HAL_InitTick+0x5c>)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800126a:	2300      	movs	r3, #0
 800126c:	e000      	b.n	8001270 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
}
 8001270:	4618      	mov	r0, r3
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20000000 	.word	0x20000000
 800127c:	20000008 	.word	0x20000008
 8001280:	20000004 	.word	0x20000004

08001284 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001288:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <HAL_IncTick+0x20>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	461a      	mov	r2, r3
 800128e:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <HAL_IncTick+0x24>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4413      	add	r3, r2
 8001294:	4a04      	ldr	r2, [pc, #16]	; (80012a8 <HAL_IncTick+0x24>)
 8001296:	6013      	str	r3, [r2, #0]
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	20000008 	.word	0x20000008
 80012a8:	200000e4 	.word	0x200000e4

080012ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  return uwTick;
 80012b0:	4b03      	ldr	r3, [pc, #12]	; (80012c0 <HAL_GetTick+0x14>)
 80012b2:	681b      	ldr	r3, [r3, #0]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	200000e4 	.word	0x200000e4

080012c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d4:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <__NVIC_SetPriorityGrouping+0x44>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012da:	68ba      	ldr	r2, [r7, #8]
 80012dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012e0:	4013      	ands	r3, r2
 80012e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012f6:	4a04      	ldr	r2, [pc, #16]	; (8001308 <__NVIC_SetPriorityGrouping+0x44>)
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	60d3      	str	r3, [r2, #12]
}
 80012fc:	bf00      	nop
 80012fe:	3714      	adds	r7, #20
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001310:	4b04      	ldr	r3, [pc, #16]	; (8001324 <__NVIC_GetPriorityGrouping+0x18>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	0a1b      	lsrs	r3, r3, #8
 8001316:	f003 0307 	and.w	r3, r3, #7
}
 800131a:	4618      	mov	r0, r3
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001336:	2b00      	cmp	r3, #0
 8001338:	db0b      	blt.n	8001352 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	f003 021f 	and.w	r2, r3, #31
 8001340:	4907      	ldr	r1, [pc, #28]	; (8001360 <__NVIC_EnableIRQ+0x38>)
 8001342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001346:	095b      	lsrs	r3, r3, #5
 8001348:	2001      	movs	r0, #1
 800134a:	fa00 f202 	lsl.w	r2, r0, r2
 800134e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001352:	bf00      	nop
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	e000e100 	.word	0xe000e100

08001364 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	6039      	str	r1, [r7, #0]
 800136e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001374:	2b00      	cmp	r3, #0
 8001376:	db0a      	blt.n	800138e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	b2da      	uxtb	r2, r3
 800137c:	490c      	ldr	r1, [pc, #48]	; (80013b0 <__NVIC_SetPriority+0x4c>)
 800137e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001382:	0112      	lsls	r2, r2, #4
 8001384:	b2d2      	uxtb	r2, r2
 8001386:	440b      	add	r3, r1
 8001388:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800138c:	e00a      	b.n	80013a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	b2da      	uxtb	r2, r3
 8001392:	4908      	ldr	r1, [pc, #32]	; (80013b4 <__NVIC_SetPriority+0x50>)
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	f003 030f 	and.w	r3, r3, #15
 800139a:	3b04      	subs	r3, #4
 800139c:	0112      	lsls	r2, r2, #4
 800139e:	b2d2      	uxtb	r2, r2
 80013a0:	440b      	add	r3, r1
 80013a2:	761a      	strb	r2, [r3, #24]
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	e000e100 	.word	0xe000e100
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b089      	sub	sp, #36	; 0x24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	f1c3 0307 	rsb	r3, r3, #7
 80013d2:	2b04      	cmp	r3, #4
 80013d4:	bf28      	it	cs
 80013d6:	2304      	movcs	r3, #4
 80013d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	3304      	adds	r3, #4
 80013de:	2b06      	cmp	r3, #6
 80013e0:	d902      	bls.n	80013e8 <NVIC_EncodePriority+0x30>
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	3b03      	subs	r3, #3
 80013e6:	e000      	b.n	80013ea <NVIC_EncodePriority+0x32>
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ec:	f04f 32ff 	mov.w	r2, #4294967295
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43da      	mvns	r2, r3
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	401a      	ands	r2, r3
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001400:	f04f 31ff 	mov.w	r1, #4294967295
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	fa01 f303 	lsl.w	r3, r1, r3
 800140a:	43d9      	mvns	r1, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001410:	4313      	orrs	r3, r2
         );
}
 8001412:	4618      	mov	r0, r3
 8001414:	3724      	adds	r7, #36	; 0x24
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
	...

08001420 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3b01      	subs	r3, #1
 800142c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001430:	d301      	bcc.n	8001436 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001432:	2301      	movs	r3, #1
 8001434:	e00f      	b.n	8001456 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001436:	4a0a      	ldr	r2, [pc, #40]	; (8001460 <SysTick_Config+0x40>)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	3b01      	subs	r3, #1
 800143c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800143e:	210f      	movs	r1, #15
 8001440:	f04f 30ff 	mov.w	r0, #4294967295
 8001444:	f7ff ff8e 	bl	8001364 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001448:	4b05      	ldr	r3, [pc, #20]	; (8001460 <SysTick_Config+0x40>)
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800144e:	4b04      	ldr	r3, [pc, #16]	; (8001460 <SysTick_Config+0x40>)
 8001450:	2207      	movs	r2, #7
 8001452:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	e000e010 	.word	0xe000e010

08001464 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7ff ff29 	bl	80012c4 <__NVIC_SetPriorityGrouping>
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800147a:	b580      	push	{r7, lr}
 800147c:	b086      	sub	sp, #24
 800147e:	af00      	add	r7, sp, #0
 8001480:	4603      	mov	r3, r0
 8001482:	60b9      	str	r1, [r7, #8]
 8001484:	607a      	str	r2, [r7, #4]
 8001486:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800148c:	f7ff ff3e 	bl	800130c <__NVIC_GetPriorityGrouping>
 8001490:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	68b9      	ldr	r1, [r7, #8]
 8001496:	6978      	ldr	r0, [r7, #20]
 8001498:	f7ff ff8e 	bl	80013b8 <NVIC_EncodePriority>
 800149c:	4602      	mov	r2, r0
 800149e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014a2:	4611      	mov	r1, r2
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff ff5d 	bl	8001364 <__NVIC_SetPriority>
}
 80014aa:	bf00      	nop
 80014ac:	3718      	adds	r7, #24
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b082      	sub	sp, #8
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	4603      	mov	r3, r0
 80014ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff ff31 	bl	8001328 <__NVIC_EnableIRQ>
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff ffa2 	bl	8001420 <SysTick_Config>
 80014dc:	4603      	mov	r3, r0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b082      	sub	sp, #8
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d101      	bne.n	80014f8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e014      	b.n	8001522 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	791b      	ldrb	r3, [r3, #4]
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d105      	bne.n	800150e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f7ff fd43 	bl	8000f94 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2202      	movs	r2, #2
 8001512:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2201      	movs	r2, #1
 800151e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
	...

0800152c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
 8001538:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800153a:	2300      	movs	r3, #0
 800153c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 800153e:	2300      	movs	r3, #0
 8001540:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	795b      	ldrb	r3, [r3, #5]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d101      	bne.n	800154e <HAL_DAC_Start_DMA+0x22>
 800154a:	2302      	movs	r3, #2
 800154c:	e069      	b.n	8001622 <HAL_DAC_Start_DMA+0xf6>
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2201      	movs	r2, #1
 8001552:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2202      	movs	r2, #2
 8001558:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d12f      	bne.n	80015c0 <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	4a31      	ldr	r2, [pc, #196]	; (800162c <HAL_DAC_Start_DMA+0x100>)
 8001566:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	4a30      	ldr	r2, [pc, #192]	; (8001630 <HAL_DAC_Start_DMA+0x104>)
 800156e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	4a2f      	ldr	r2, [pc, #188]	; (8001634 <HAL_DAC_Start_DMA+0x108>)
 8001576:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001586:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001588:	6a3b      	ldr	r3, [r7, #32]
 800158a:	2b08      	cmp	r3, #8
 800158c:	d013      	beq.n	80015b6 <HAL_DAC_Start_DMA+0x8a>
 800158e:	6a3b      	ldr	r3, [r7, #32]
 8001590:	2b08      	cmp	r3, #8
 8001592:	d817      	bhi.n	80015c4 <HAL_DAC_Start_DMA+0x98>
 8001594:	6a3b      	ldr	r3, [r7, #32]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d003      	beq.n	80015a2 <HAL_DAC_Start_DMA+0x76>
 800159a:	6a3b      	ldr	r3, [r7, #32]
 800159c:	2b04      	cmp	r3, #4
 800159e:	d005      	beq.n	80015ac <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80015a0:	e010      	b.n	80015c4 <HAL_DAC_Start_DMA+0x98>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	3308      	adds	r3, #8
 80015a8:	613b      	str	r3, [r7, #16]
        break;
 80015aa:	e00c      	b.n	80015c6 <HAL_DAC_Start_DMA+0x9a>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	330c      	adds	r3, #12
 80015b2:	613b      	str	r3, [r7, #16]
        break;
 80015b4:	e007      	b.n	80015c6 <HAL_DAC_Start_DMA+0x9a>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	3310      	adds	r3, #16
 80015bc:	613b      	str	r3, [r7, #16]
        break;
 80015be:	e002      	b.n	80015c6 <HAL_DAC_Start_DMA+0x9a>
    }
  }
 80015c0:	bf00      	nop
 80015c2:	e000      	b.n	80015c6 <HAL_DAC_Start_DMA+0x9a>
        break;
 80015c4:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d110      	bne.n	80015ee <HAL_DAC_Start_DMA+0xc2>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80015da:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	6898      	ldr	r0, [r3, #8]
 80015e0:	6879      	ldr	r1, [r7, #4]
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	f000 f9b3 	bl	8001950 <HAL_DMA_Start_IT>
 80015ea:	4603      	mov	r3, r0
 80015ec:	75fb      	strb	r3, [r7, #23]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2200      	movs	r2, #0
 80015f2:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80015f4:	7dfb      	ldrb	r3, [r7, #23]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d10c      	bne.n	8001614 <HAL_DAC_Start_DMA+0xe8>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	6819      	ldr	r1, [r3, #0]
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	f003 0310 	and.w	r3, r3, #16
 8001606:	2201      	movs	r2, #1
 8001608:	409a      	lsls	r2, r3
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	430a      	orrs	r2, r1
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	e005      	b.n	8001620 <HAL_DAC_Start_DMA+0xf4>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	691b      	ldr	r3, [r3, #16]
 8001618:	f043 0204 	orr.w	r2, r3, #4
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001620:	7dfb      	ldrb	r3, [r7, #23]
}
 8001622:	4618      	mov	r0, r3
 8001624:	3718      	adds	r7, #24
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	08001789 	.word	0x08001789
 8001630:	080017ab 	.word	0x080017ab
 8001634:	080017c7 	.word	0x080017c7

08001638 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800164a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800164e:	d120      	bne.n	8001692 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001656:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800165a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800165e:	d118      	bne.n	8001692 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2204      	movs	r2, #4
 8001664:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	f043 0201 	orr.w	r2, r3, #1
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800167a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800168a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f000 f822 	bl	80016d6 <HAL_DAC_DMAUnderrunCallbackCh1>
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 8001692:	bf00      	nop
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800169a:	b480      	push	{r7}
 800169c:	b083      	sub	sp, #12
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80016a2:	bf00      	nop
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80016ae:	b480      	push	{r7}
 80016b0:	b083      	sub	sp, #12
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b083      	sub	sp, #12
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80016d6:	b480      	push	{r7}
 80016d8:	b083      	sub	sp, #12
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b087      	sub	sp, #28
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	60f8      	str	r0, [r7, #12]
 80016f2:	60b9      	str	r1, [r7, #8]
 80016f4:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	795b      	ldrb	r3, [r3, #5]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d101      	bne.n	8001702 <HAL_DAC_ConfigChannel+0x18>
 80016fe:	2302      	movs	r3, #2
 8001700:	e03c      	b.n	800177c <HAL_DAC_ConfigChannel+0x92>
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2201      	movs	r2, #1
 8001706:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2202      	movs	r2, #2
 800170c:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f003 0310 	and.w	r3, r3, #16
 800171c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	43db      	mvns	r3, r3
 8001726:	697a      	ldr	r2, [r7, #20]
 8001728:	4013      	ands	r3, r2
 800172a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	4313      	orrs	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f003 0310 	and.w	r3, r3, #16
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	697a      	ldr	r2, [r7, #20]
 8001746:	4313      	orrs	r3, r2
 8001748:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	697a      	ldr	r2, [r7, #20]
 8001750:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	6819      	ldr	r1, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f003 0310 	and.w	r3, r3, #16
 800175e:	22c0      	movs	r2, #192	; 0xc0
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	43da      	mvns	r2, r3
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	400a      	ands	r2, r1
 800176c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2201      	movs	r2, #1
 8001772:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2200      	movs	r2, #0
 8001778:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	371c      	adds	r7, #28
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001794:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001796:	68f8      	ldr	r0, [r7, #12]
 8001798:	f7ff ff7f 	bl	800169a <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2201      	movs	r2, #1
 80017a0:	711a      	strb	r2, [r3, #4]
}
 80017a2:	bf00      	nop
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b084      	sub	sp, #16
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017b6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80017b8:	68f8      	ldr	r0, [r7, #12]
 80017ba:	f7ff ff78 	bl	80016ae <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80017be:	bf00      	nop
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b084      	sub	sp, #16
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017d2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	f043 0204 	orr.w	r2, r3, #4
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80017e0:	68f8      	ldr	r0, [r7, #12]
 80017e2:	f7ff ff6e 	bl	80016c2 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2201      	movs	r2, #1
 80017ea:	711a      	strb	r2, [r3, #4]
}
 80017ec:	bf00      	nop
 80017ee:	3710      	adds	r7, #16
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001800:	f7ff fd54 	bl	80012ac <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d101      	bne.n	8001810 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e099      	b.n	8001944 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2202      	movs	r2, #2
 8001814:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f022 0201 	bic.w	r2, r2, #1
 800182e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001830:	e00f      	b.n	8001852 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001832:	f7ff fd3b 	bl	80012ac <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b05      	cmp	r3, #5
 800183e:	d908      	bls.n	8001852 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2220      	movs	r2, #32
 8001844:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2203      	movs	r2, #3
 800184a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e078      	b.n	8001944 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0301 	and.w	r3, r3, #1
 800185c:	2b00      	cmp	r3, #0
 800185e:	d1e8      	bne.n	8001832 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001868:	697a      	ldr	r2, [r7, #20]
 800186a:	4b38      	ldr	r3, [pc, #224]	; (800194c <HAL_DMA_Init+0x158>)
 800186c:	4013      	ands	r3, r2
 800186e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685a      	ldr	r2, [r3, #4]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800187e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	691b      	ldr	r3, [r3, #16]
 8001884:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800188a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001896:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a1b      	ldr	r3, [r3, #32]
 800189c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800189e:	697a      	ldr	r2, [r7, #20]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a8:	2b04      	cmp	r3, #4
 80018aa:	d107      	bne.n	80018bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b4:	4313      	orrs	r3, r2
 80018b6:	697a      	ldr	r2, [r7, #20]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	697a      	ldr	r2, [r7, #20]
 80018c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	695b      	ldr	r3, [r3, #20]
 80018ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	f023 0307 	bic.w	r3, r3, #7
 80018d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d8:	697a      	ldr	r2, [r7, #20]
 80018da:	4313      	orrs	r3, r2
 80018dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e2:	2b04      	cmp	r3, #4
 80018e4:	d117      	bne.n	8001916 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ea:	697a      	ldr	r2, [r7, #20]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d00e      	beq.n	8001916 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f000 fa6f 	bl	8001ddc <DMA_CheckFifoParam>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d008      	beq.n	8001916 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2240      	movs	r2, #64	; 0x40
 8001908:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2201      	movs	r2, #1
 800190e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001912:	2301      	movs	r3, #1
 8001914:	e016      	b.n	8001944 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	697a      	ldr	r2, [r7, #20]
 800191c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f000 fa26 	bl	8001d70 <DMA_CalcBaseAndBitshift>
 8001924:	4603      	mov	r3, r0
 8001926:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800192c:	223f      	movs	r2, #63	; 0x3f
 800192e:	409a      	lsls	r2, r3
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2201      	movs	r2, #1
 800193e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	3718      	adds	r7, #24
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	f010803f 	.word	0xf010803f

08001950 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
 800195c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800195e:	2300      	movs	r3, #0
 8001960:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001966:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800196e:	2b01      	cmp	r3, #1
 8001970:	d101      	bne.n	8001976 <HAL_DMA_Start_IT+0x26>
 8001972:	2302      	movs	r3, #2
 8001974:	e040      	b.n	80019f8 <HAL_DMA_Start_IT+0xa8>
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2201      	movs	r2, #1
 800197a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b01      	cmp	r3, #1
 8001988:	d12f      	bne.n	80019ea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2202      	movs	r2, #2
 800198e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2200      	movs	r2, #0
 8001996:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	68b9      	ldr	r1, [r7, #8]
 800199e:	68f8      	ldr	r0, [r7, #12]
 80019a0:	f000 f9b8 	bl	8001d14 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019a8:	223f      	movs	r2, #63	; 0x3f
 80019aa:	409a      	lsls	r2, r3
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f042 0216 	orr.w	r2, r2, #22
 80019be:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d007      	beq.n	80019d8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f042 0208 	orr.w	r2, r2, #8
 80019d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f042 0201 	orr.w	r2, r2, #1
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	e005      	b.n	80019f6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80019f2:	2302      	movs	r3, #2
 80019f4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80019f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3718      	adds	r7, #24
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a0c:	4b8e      	ldr	r3, [pc, #568]	; (8001c48 <HAL_DMA_IRQHandler+0x248>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a8e      	ldr	r2, [pc, #568]	; (8001c4c <HAL_DMA_IRQHandler+0x24c>)
 8001a12:	fba2 2303 	umull	r2, r3, r2, r3
 8001a16:	0a9b      	lsrs	r3, r3, #10
 8001a18:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a2a:	2208      	movs	r2, #8
 8001a2c:	409a      	lsls	r2, r3
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	4013      	ands	r3, r2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d01a      	beq.n	8001a6c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0304 	and.w	r3, r3, #4
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d013      	beq.n	8001a6c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f022 0204 	bic.w	r2, r2, #4
 8001a52:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a58:	2208      	movs	r2, #8
 8001a5a:	409a      	lsls	r2, r3
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a64:	f043 0201 	orr.w	r2, r3, #1
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a70:	2201      	movs	r2, #1
 8001a72:	409a      	lsls	r2, r3
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	4013      	ands	r3, r2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d012      	beq.n	8001aa2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d00b      	beq.n	8001aa2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a8e:	2201      	movs	r2, #1
 8001a90:	409a      	lsls	r2, r3
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a9a:	f043 0202 	orr.w	r2, r3, #2
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aa6:	2204      	movs	r2, #4
 8001aa8:	409a      	lsls	r2, r3
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	4013      	ands	r3, r2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d012      	beq.n	8001ad8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d00b      	beq.n	8001ad8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac4:	2204      	movs	r2, #4
 8001ac6:	409a      	lsls	r2, r3
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad0:	f043 0204 	orr.w	r2, r3, #4
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001adc:	2210      	movs	r2, #16
 8001ade:	409a      	lsls	r2, r3
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d043      	beq.n	8001b70 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0308 	and.w	r3, r3, #8
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d03c      	beq.n	8001b70 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001afa:	2210      	movs	r2, #16
 8001afc:	409a      	lsls	r2, r3
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d018      	beq.n	8001b42 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d108      	bne.n	8001b30 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d024      	beq.n	8001b70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	4798      	blx	r3
 8001b2e:	e01f      	b.n	8001b70 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d01b      	beq.n	8001b70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	4798      	blx	r3
 8001b40:	e016      	b.n	8001b70 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d107      	bne.n	8001b60 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f022 0208 	bic.w	r2, r2, #8
 8001b5e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d003      	beq.n	8001b70 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b74:	2220      	movs	r2, #32
 8001b76:	409a      	lsls	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	f000 808f 	beq.w	8001ca0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0310 	and.w	r3, r3, #16
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	f000 8087 	beq.w	8001ca0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b96:	2220      	movs	r2, #32
 8001b98:	409a      	lsls	r2, r3
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b05      	cmp	r3, #5
 8001ba8:	d136      	bne.n	8001c18 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 0216 	bic.w	r2, r2, #22
 8001bb8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	695a      	ldr	r2, [r3, #20]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bc8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d103      	bne.n	8001bda <HAL_DMA_IRQHandler+0x1da>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d007      	beq.n	8001bea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f022 0208 	bic.w	r2, r2, #8
 8001be8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bee:	223f      	movs	r2, #63	; 0x3f
 8001bf0:	409a      	lsls	r2, r3
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d07e      	beq.n	8001d0c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	4798      	blx	r3
        }
        return;
 8001c16:	e079      	b.n	8001d0c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d01d      	beq.n	8001c62 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d10d      	bne.n	8001c50 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d031      	beq.n	8001ca0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	4798      	blx	r3
 8001c44:	e02c      	b.n	8001ca0 <HAL_DMA_IRQHandler+0x2a0>
 8001c46:	bf00      	nop
 8001c48:	20000000 	.word	0x20000000
 8001c4c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d023      	beq.n	8001ca0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	4798      	blx	r3
 8001c60:	e01e      	b.n	8001ca0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d10f      	bne.n	8001c90 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 0210 	bic.w	r2, r2, #16
 8001c7e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d003      	beq.n	8001ca0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d032      	beq.n	8001d0e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cac:	f003 0301 	and.w	r3, r3, #1
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d022      	beq.n	8001cfa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2205      	movs	r2, #5
 8001cb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f022 0201 	bic.w	r2, r2, #1
 8001cca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	60bb      	str	r3, [r7, #8]
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d307      	bcc.n	8001ce8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1f2      	bne.n	8001ccc <HAL_DMA_IRQHandler+0x2cc>
 8001ce6:	e000      	b.n	8001cea <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001ce8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2201      	movs	r2, #1
 8001cee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d005      	beq.n	8001d0e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	4798      	blx	r3
 8001d0a:	e000      	b.n	8001d0e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001d0c:	bf00      	nop
    }
  }
}
 8001d0e:	3718      	adds	r7, #24
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
 8001d20:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d30:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	2b40      	cmp	r3, #64	; 0x40
 8001d40:	d108      	bne.n	8001d54 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68ba      	ldr	r2, [r7, #8]
 8001d50:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001d52:	e007      	b.n	8001d64 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68ba      	ldr	r2, [r7, #8]
 8001d5a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	60da      	str	r2, [r3, #12]
}
 8001d64:	bf00      	nop
 8001d66:	3714      	adds	r7, #20
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	3b10      	subs	r3, #16
 8001d80:	4a14      	ldr	r2, [pc, #80]	; (8001dd4 <DMA_CalcBaseAndBitshift+0x64>)
 8001d82:	fba2 2303 	umull	r2, r3, r2, r3
 8001d86:	091b      	lsrs	r3, r3, #4
 8001d88:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d8a:	4a13      	ldr	r2, [pc, #76]	; (8001dd8 <DMA_CalcBaseAndBitshift+0x68>)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	4413      	add	r3, r2
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	461a      	mov	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2b03      	cmp	r3, #3
 8001d9c:	d909      	bls.n	8001db2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001da6:	f023 0303 	bic.w	r3, r3, #3
 8001daa:	1d1a      	adds	r2, r3, #4
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	659a      	str	r2, [r3, #88]	; 0x58
 8001db0:	e007      	b.n	8001dc2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001dba:	f023 0303 	bic.w	r3, r3, #3
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3714      	adds	r7, #20
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	aaaaaaab 	.word	0xaaaaaaab
 8001dd8:	08003c28 	.word	0x08003c28

08001ddc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001de4:	2300      	movs	r3, #0
 8001de6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d11f      	bne.n	8001e36 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	2b03      	cmp	r3, #3
 8001dfa:	d856      	bhi.n	8001eaa <DMA_CheckFifoParam+0xce>
 8001dfc:	a201      	add	r2, pc, #4	; (adr r2, 8001e04 <DMA_CheckFifoParam+0x28>)
 8001dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e02:	bf00      	nop
 8001e04:	08001e15 	.word	0x08001e15
 8001e08:	08001e27 	.word	0x08001e27
 8001e0c:	08001e15 	.word	0x08001e15
 8001e10:	08001eab 	.word	0x08001eab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d046      	beq.n	8001eae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e24:	e043      	b.n	8001eae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e2e:	d140      	bne.n	8001eb2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e34:	e03d      	b.n	8001eb2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e3e:	d121      	bne.n	8001e84 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	2b03      	cmp	r3, #3
 8001e44:	d837      	bhi.n	8001eb6 <DMA_CheckFifoParam+0xda>
 8001e46:	a201      	add	r2, pc, #4	; (adr r2, 8001e4c <DMA_CheckFifoParam+0x70>)
 8001e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e4c:	08001e5d 	.word	0x08001e5d
 8001e50:	08001e63 	.word	0x08001e63
 8001e54:	08001e5d 	.word	0x08001e5d
 8001e58:	08001e75 	.word	0x08001e75
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	73fb      	strb	r3, [r7, #15]
      break;
 8001e60:	e030      	b.n	8001ec4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d025      	beq.n	8001eba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e72:	e022      	b.n	8001eba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e78:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e7c:	d11f      	bne.n	8001ebe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e82:	e01c      	b.n	8001ebe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d903      	bls.n	8001e92 <DMA_CheckFifoParam+0xb6>
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	2b03      	cmp	r3, #3
 8001e8e:	d003      	beq.n	8001e98 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e90:	e018      	b.n	8001ec4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	73fb      	strb	r3, [r7, #15]
      break;
 8001e96:	e015      	b.n	8001ec4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d00e      	beq.n	8001ec2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	73fb      	strb	r3, [r7, #15]
      break;
 8001ea8:	e00b      	b.n	8001ec2 <DMA_CheckFifoParam+0xe6>
      break;
 8001eaa:	bf00      	nop
 8001eac:	e00a      	b.n	8001ec4 <DMA_CheckFifoParam+0xe8>
      break;
 8001eae:	bf00      	nop
 8001eb0:	e008      	b.n	8001ec4 <DMA_CheckFifoParam+0xe8>
      break;
 8001eb2:	bf00      	nop
 8001eb4:	e006      	b.n	8001ec4 <DMA_CheckFifoParam+0xe8>
      break;
 8001eb6:	bf00      	nop
 8001eb8:	e004      	b.n	8001ec4 <DMA_CheckFifoParam+0xe8>
      break;
 8001eba:	bf00      	nop
 8001ebc:	e002      	b.n	8001ec4 <DMA_CheckFifoParam+0xe8>
      break;   
 8001ebe:	bf00      	nop
 8001ec0:	e000      	b.n	8001ec4 <DMA_CheckFifoParam+0xe8>
      break;
 8001ec2:	bf00      	nop
    }
  } 
  
  return status; 
 8001ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3714      	adds	r7, #20
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop

08001ed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b089      	sub	sp, #36	; 0x24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eea:	2300      	movs	r3, #0
 8001eec:	61fb      	str	r3, [r7, #28]
 8001eee:	e14d      	b.n	800218c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	4013      	ands	r3, r2
 8001f02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	f040 813c 	bne.w	8002186 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f003 0303 	and.w	r3, r3, #3
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d005      	beq.n	8001f26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d130      	bne.n	8001f88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	2203      	movs	r2, #3
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	43db      	mvns	r3, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	68da      	ldr	r2, [r3, #12]
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	43db      	mvns	r3, r3
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	091b      	lsrs	r3, r3, #4
 8001f72:	f003 0201 	and.w	r2, r3, #1
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f003 0303 	and.w	r3, r3, #3
 8001f90:	2b03      	cmp	r3, #3
 8001f92:	d017      	beq.n	8001fc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	2203      	movs	r2, #3
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	689a      	ldr	r2, [r3, #8]
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f003 0303 	and.w	r3, r3, #3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d123      	bne.n	8002018 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	08da      	lsrs	r2, r3, #3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3208      	adds	r2, #8
 8001fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	f003 0307 	and.w	r3, r3, #7
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	220f      	movs	r2, #15
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	43db      	mvns	r3, r3
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	691a      	ldr	r2, [r3, #16]
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	4313      	orrs	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	08da      	lsrs	r2, r3, #3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	3208      	adds	r2, #8
 8002012:	69b9      	ldr	r1, [r7, #24]
 8002014:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	2203      	movs	r2, #3
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	43db      	mvns	r3, r3
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	4013      	ands	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f003 0203 	and.w	r2, r3, #3
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	4313      	orrs	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002054:	2b00      	cmp	r3, #0
 8002056:	f000 8096 	beq.w	8002186 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800205a:	2300      	movs	r3, #0
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	4b51      	ldr	r3, [pc, #324]	; (80021a4 <HAL_GPIO_Init+0x2d0>)
 8002060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002062:	4a50      	ldr	r2, [pc, #320]	; (80021a4 <HAL_GPIO_Init+0x2d0>)
 8002064:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002068:	6453      	str	r3, [r2, #68]	; 0x44
 800206a:	4b4e      	ldr	r3, [pc, #312]	; (80021a4 <HAL_GPIO_Init+0x2d0>)
 800206c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002076:	4a4c      	ldr	r2, [pc, #304]	; (80021a8 <HAL_GPIO_Init+0x2d4>)
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	089b      	lsrs	r3, r3, #2
 800207c:	3302      	adds	r3, #2
 800207e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002082:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f003 0303 	and.w	r3, r3, #3
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	220f      	movs	r2, #15
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	43db      	mvns	r3, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4013      	ands	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a43      	ldr	r2, [pc, #268]	; (80021ac <HAL_GPIO_Init+0x2d8>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d00d      	beq.n	80020be <HAL_GPIO_Init+0x1ea>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a42      	ldr	r2, [pc, #264]	; (80021b0 <HAL_GPIO_Init+0x2dc>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d007      	beq.n	80020ba <HAL_GPIO_Init+0x1e6>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a41      	ldr	r2, [pc, #260]	; (80021b4 <HAL_GPIO_Init+0x2e0>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d101      	bne.n	80020b6 <HAL_GPIO_Init+0x1e2>
 80020b2:	2302      	movs	r3, #2
 80020b4:	e004      	b.n	80020c0 <HAL_GPIO_Init+0x1ec>
 80020b6:	2307      	movs	r3, #7
 80020b8:	e002      	b.n	80020c0 <HAL_GPIO_Init+0x1ec>
 80020ba:	2301      	movs	r3, #1
 80020bc:	e000      	b.n	80020c0 <HAL_GPIO_Init+0x1ec>
 80020be:	2300      	movs	r3, #0
 80020c0:	69fa      	ldr	r2, [r7, #28]
 80020c2:	f002 0203 	and.w	r2, r2, #3
 80020c6:	0092      	lsls	r2, r2, #2
 80020c8:	4093      	lsls	r3, r2
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020d0:	4935      	ldr	r1, [pc, #212]	; (80021a8 <HAL_GPIO_Init+0x2d4>)
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	089b      	lsrs	r3, r3, #2
 80020d6:	3302      	adds	r3, #2
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020de:	4b36      	ldr	r3, [pc, #216]	; (80021b8 <HAL_GPIO_Init+0x2e4>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	43db      	mvns	r3, r3
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	4013      	ands	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	4313      	orrs	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002102:	4a2d      	ldr	r2, [pc, #180]	; (80021b8 <HAL_GPIO_Init+0x2e4>)
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002108:	4b2b      	ldr	r3, [pc, #172]	; (80021b8 <HAL_GPIO_Init+0x2e4>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	43db      	mvns	r3, r3
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4013      	ands	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d003      	beq.n	800212c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	4313      	orrs	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800212c:	4a22      	ldr	r2, [pc, #136]	; (80021b8 <HAL_GPIO_Init+0x2e4>)
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002132:	4b21      	ldr	r3, [pc, #132]	; (80021b8 <HAL_GPIO_Init+0x2e4>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	43db      	mvns	r3, r3
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4013      	ands	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	4313      	orrs	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002156:	4a18      	ldr	r2, [pc, #96]	; (80021b8 <HAL_GPIO_Init+0x2e4>)
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800215c:	4b16      	ldr	r3, [pc, #88]	; (80021b8 <HAL_GPIO_Init+0x2e4>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	43db      	mvns	r3, r3
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4013      	ands	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d003      	beq.n	8002180 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	4313      	orrs	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002180:	4a0d      	ldr	r2, [pc, #52]	; (80021b8 <HAL_GPIO_Init+0x2e4>)
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	3301      	adds	r3, #1
 800218a:	61fb      	str	r3, [r7, #28]
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	2b0f      	cmp	r3, #15
 8002190:	f67f aeae 	bls.w	8001ef0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002194:	bf00      	nop
 8002196:	bf00      	nop
 8002198:	3724      	adds	r7, #36	; 0x24
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	40023800 	.word	0x40023800
 80021a8:	40013800 	.word	0x40013800
 80021ac:	40020000 	.word	0x40020000
 80021b0:	40020400 	.word	0x40020400
 80021b4:	40020800 	.word	0x40020800
 80021b8:	40013c00 	.word	0x40013c00

080021bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d101      	bne.n	80021d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e0cc      	b.n	800236a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021d0:	4b68      	ldr	r3, [pc, #416]	; (8002374 <HAL_RCC_ClockConfig+0x1b8>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	683a      	ldr	r2, [r7, #0]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d90c      	bls.n	80021f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021de:	4b65      	ldr	r3, [pc, #404]	; (8002374 <HAL_RCC_ClockConfig+0x1b8>)
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	b2d2      	uxtb	r2, r2
 80021e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021e6:	4b63      	ldr	r3, [pc, #396]	; (8002374 <HAL_RCC_ClockConfig+0x1b8>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d001      	beq.n	80021f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e0b8      	b.n	800236a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d020      	beq.n	8002246 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0304 	and.w	r3, r3, #4
 800220c:	2b00      	cmp	r3, #0
 800220e:	d005      	beq.n	800221c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002210:	4b59      	ldr	r3, [pc, #356]	; (8002378 <HAL_RCC_ClockConfig+0x1bc>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	4a58      	ldr	r2, [pc, #352]	; (8002378 <HAL_RCC_ClockConfig+0x1bc>)
 8002216:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800221a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0308 	and.w	r3, r3, #8
 8002224:	2b00      	cmp	r3, #0
 8002226:	d005      	beq.n	8002234 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002228:	4b53      	ldr	r3, [pc, #332]	; (8002378 <HAL_RCC_ClockConfig+0x1bc>)
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	4a52      	ldr	r2, [pc, #328]	; (8002378 <HAL_RCC_ClockConfig+0x1bc>)
 800222e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002232:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002234:	4b50      	ldr	r3, [pc, #320]	; (8002378 <HAL_RCC_ClockConfig+0x1bc>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	494d      	ldr	r1, [pc, #308]	; (8002378 <HAL_RCC_ClockConfig+0x1bc>)
 8002242:	4313      	orrs	r3, r2
 8002244:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	2b00      	cmp	r3, #0
 8002250:	d044      	beq.n	80022dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d107      	bne.n	800226a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800225a:	4b47      	ldr	r3, [pc, #284]	; (8002378 <HAL_RCC_ClockConfig+0x1bc>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d119      	bne.n	800229a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e07f      	b.n	800236a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2b02      	cmp	r3, #2
 8002270:	d003      	beq.n	800227a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002276:	2b03      	cmp	r3, #3
 8002278:	d107      	bne.n	800228a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800227a:	4b3f      	ldr	r3, [pc, #252]	; (8002378 <HAL_RCC_ClockConfig+0x1bc>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d109      	bne.n	800229a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e06f      	b.n	800236a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800228a:	4b3b      	ldr	r3, [pc, #236]	; (8002378 <HAL_RCC_ClockConfig+0x1bc>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e067      	b.n	800236a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800229a:	4b37      	ldr	r3, [pc, #220]	; (8002378 <HAL_RCC_ClockConfig+0x1bc>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f023 0203 	bic.w	r2, r3, #3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	4934      	ldr	r1, [pc, #208]	; (8002378 <HAL_RCC_ClockConfig+0x1bc>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022ac:	f7fe fffe 	bl	80012ac <HAL_GetTick>
 80022b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022b2:	e00a      	b.n	80022ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022b4:	f7fe fffa 	bl	80012ac <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e04f      	b.n	800236a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ca:	4b2b      	ldr	r3, [pc, #172]	; (8002378 <HAL_RCC_ClockConfig+0x1bc>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f003 020c 	and.w	r2, r3, #12
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	429a      	cmp	r2, r3
 80022da:	d1eb      	bne.n	80022b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022dc:	4b25      	ldr	r3, [pc, #148]	; (8002374 <HAL_RCC_ClockConfig+0x1b8>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d20c      	bcs.n	8002304 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ea:	4b22      	ldr	r3, [pc, #136]	; (8002374 <HAL_RCC_ClockConfig+0x1b8>)
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	b2d2      	uxtb	r2, r2
 80022f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022f2:	4b20      	ldr	r3, [pc, #128]	; (8002374 <HAL_RCC_ClockConfig+0x1b8>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d001      	beq.n	8002304 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e032      	b.n	800236a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	2b00      	cmp	r3, #0
 800230e:	d008      	beq.n	8002322 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002310:	4b19      	ldr	r3, [pc, #100]	; (8002378 <HAL_RCC_ClockConfig+0x1bc>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	4916      	ldr	r1, [pc, #88]	; (8002378 <HAL_RCC_ClockConfig+0x1bc>)
 800231e:	4313      	orrs	r3, r2
 8002320:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0308 	and.w	r3, r3, #8
 800232a:	2b00      	cmp	r3, #0
 800232c:	d009      	beq.n	8002342 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800232e:	4b12      	ldr	r3, [pc, #72]	; (8002378 <HAL_RCC_ClockConfig+0x1bc>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	490e      	ldr	r1, [pc, #56]	; (8002378 <HAL_RCC_ClockConfig+0x1bc>)
 800233e:	4313      	orrs	r3, r2
 8002340:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002342:	f000 f821 	bl	8002388 <HAL_RCC_GetSysClockFreq>
 8002346:	4602      	mov	r2, r0
 8002348:	4b0b      	ldr	r3, [pc, #44]	; (8002378 <HAL_RCC_ClockConfig+0x1bc>)
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	091b      	lsrs	r3, r3, #4
 800234e:	f003 030f 	and.w	r3, r3, #15
 8002352:	490a      	ldr	r1, [pc, #40]	; (800237c <HAL_RCC_ClockConfig+0x1c0>)
 8002354:	5ccb      	ldrb	r3, [r1, r3]
 8002356:	fa22 f303 	lsr.w	r3, r2, r3
 800235a:	4a09      	ldr	r2, [pc, #36]	; (8002380 <HAL_RCC_ClockConfig+0x1c4>)
 800235c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800235e:	4b09      	ldr	r3, [pc, #36]	; (8002384 <HAL_RCC_ClockConfig+0x1c8>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4618      	mov	r0, r3
 8002364:	f7fe ff5e 	bl	8001224 <HAL_InitTick>

  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40023c00 	.word	0x40023c00
 8002378:	40023800 	.word	0x40023800
 800237c:	08003c18 	.word	0x08003c18
 8002380:	20000000 	.word	0x20000000
 8002384:	20000004 	.word	0x20000004

08002388 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002388:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800238c:	b094      	sub	sp, #80	; 0x50
 800238e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002390:	2300      	movs	r3, #0
 8002392:	647b      	str	r3, [r7, #68]	; 0x44
 8002394:	2300      	movs	r3, #0
 8002396:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002398:	2300      	movs	r3, #0
 800239a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800239c:	2300      	movs	r3, #0
 800239e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023a0:	4b79      	ldr	r3, [pc, #484]	; (8002588 <HAL_RCC_GetSysClockFreq+0x200>)
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f003 030c 	and.w	r3, r3, #12
 80023a8:	2b08      	cmp	r3, #8
 80023aa:	d00d      	beq.n	80023c8 <HAL_RCC_GetSysClockFreq+0x40>
 80023ac:	2b08      	cmp	r3, #8
 80023ae:	f200 80e1 	bhi.w	8002574 <HAL_RCC_GetSysClockFreq+0x1ec>
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d002      	beq.n	80023bc <HAL_RCC_GetSysClockFreq+0x34>
 80023b6:	2b04      	cmp	r3, #4
 80023b8:	d003      	beq.n	80023c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80023ba:	e0db      	b.n	8002574 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023bc:	4b73      	ldr	r3, [pc, #460]	; (800258c <HAL_RCC_GetSysClockFreq+0x204>)
 80023be:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80023c0:	e0db      	b.n	800257a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023c2:	4b73      	ldr	r3, [pc, #460]	; (8002590 <HAL_RCC_GetSysClockFreq+0x208>)
 80023c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023c6:	e0d8      	b.n	800257a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023c8:	4b6f      	ldr	r3, [pc, #444]	; (8002588 <HAL_RCC_GetSysClockFreq+0x200>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023d0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023d2:	4b6d      	ldr	r3, [pc, #436]	; (8002588 <HAL_RCC_GetSysClockFreq+0x200>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d063      	beq.n	80024a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023de:	4b6a      	ldr	r3, [pc, #424]	; (8002588 <HAL_RCC_GetSysClockFreq+0x200>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	099b      	lsrs	r3, r3, #6
 80023e4:	2200      	movs	r2, #0
 80023e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80023e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80023ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023f0:	633b      	str	r3, [r7, #48]	; 0x30
 80023f2:	2300      	movs	r3, #0
 80023f4:	637b      	str	r3, [r7, #52]	; 0x34
 80023f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80023fa:	4622      	mov	r2, r4
 80023fc:	462b      	mov	r3, r5
 80023fe:	f04f 0000 	mov.w	r0, #0
 8002402:	f04f 0100 	mov.w	r1, #0
 8002406:	0159      	lsls	r1, r3, #5
 8002408:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800240c:	0150      	lsls	r0, r2, #5
 800240e:	4602      	mov	r2, r0
 8002410:	460b      	mov	r3, r1
 8002412:	4621      	mov	r1, r4
 8002414:	1a51      	subs	r1, r2, r1
 8002416:	6139      	str	r1, [r7, #16]
 8002418:	4629      	mov	r1, r5
 800241a:	eb63 0301 	sbc.w	r3, r3, r1
 800241e:	617b      	str	r3, [r7, #20]
 8002420:	f04f 0200 	mov.w	r2, #0
 8002424:	f04f 0300 	mov.w	r3, #0
 8002428:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800242c:	4659      	mov	r1, fp
 800242e:	018b      	lsls	r3, r1, #6
 8002430:	4651      	mov	r1, sl
 8002432:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002436:	4651      	mov	r1, sl
 8002438:	018a      	lsls	r2, r1, #6
 800243a:	4651      	mov	r1, sl
 800243c:	ebb2 0801 	subs.w	r8, r2, r1
 8002440:	4659      	mov	r1, fp
 8002442:	eb63 0901 	sbc.w	r9, r3, r1
 8002446:	f04f 0200 	mov.w	r2, #0
 800244a:	f04f 0300 	mov.w	r3, #0
 800244e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002452:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002456:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800245a:	4690      	mov	r8, r2
 800245c:	4699      	mov	r9, r3
 800245e:	4623      	mov	r3, r4
 8002460:	eb18 0303 	adds.w	r3, r8, r3
 8002464:	60bb      	str	r3, [r7, #8]
 8002466:	462b      	mov	r3, r5
 8002468:	eb49 0303 	adc.w	r3, r9, r3
 800246c:	60fb      	str	r3, [r7, #12]
 800246e:	f04f 0200 	mov.w	r2, #0
 8002472:	f04f 0300 	mov.w	r3, #0
 8002476:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800247a:	4629      	mov	r1, r5
 800247c:	024b      	lsls	r3, r1, #9
 800247e:	4621      	mov	r1, r4
 8002480:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002484:	4621      	mov	r1, r4
 8002486:	024a      	lsls	r2, r1, #9
 8002488:	4610      	mov	r0, r2
 800248a:	4619      	mov	r1, r3
 800248c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800248e:	2200      	movs	r2, #0
 8002490:	62bb      	str	r3, [r7, #40]	; 0x28
 8002492:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002494:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002498:	f7fe fa0c 	bl	80008b4 <__aeabi_uldivmod>
 800249c:	4602      	mov	r2, r0
 800249e:	460b      	mov	r3, r1
 80024a0:	4613      	mov	r3, r2
 80024a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024a4:	e058      	b.n	8002558 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024a6:	4b38      	ldr	r3, [pc, #224]	; (8002588 <HAL_RCC_GetSysClockFreq+0x200>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	099b      	lsrs	r3, r3, #6
 80024ac:	2200      	movs	r2, #0
 80024ae:	4618      	mov	r0, r3
 80024b0:	4611      	mov	r1, r2
 80024b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80024b6:	623b      	str	r3, [r7, #32]
 80024b8:	2300      	movs	r3, #0
 80024ba:	627b      	str	r3, [r7, #36]	; 0x24
 80024bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80024c0:	4642      	mov	r2, r8
 80024c2:	464b      	mov	r3, r9
 80024c4:	f04f 0000 	mov.w	r0, #0
 80024c8:	f04f 0100 	mov.w	r1, #0
 80024cc:	0159      	lsls	r1, r3, #5
 80024ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024d2:	0150      	lsls	r0, r2, #5
 80024d4:	4602      	mov	r2, r0
 80024d6:	460b      	mov	r3, r1
 80024d8:	4641      	mov	r1, r8
 80024da:	ebb2 0a01 	subs.w	sl, r2, r1
 80024de:	4649      	mov	r1, r9
 80024e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80024e4:	f04f 0200 	mov.w	r2, #0
 80024e8:	f04f 0300 	mov.w	r3, #0
 80024ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80024f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80024f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80024f8:	ebb2 040a 	subs.w	r4, r2, sl
 80024fc:	eb63 050b 	sbc.w	r5, r3, fp
 8002500:	f04f 0200 	mov.w	r2, #0
 8002504:	f04f 0300 	mov.w	r3, #0
 8002508:	00eb      	lsls	r3, r5, #3
 800250a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800250e:	00e2      	lsls	r2, r4, #3
 8002510:	4614      	mov	r4, r2
 8002512:	461d      	mov	r5, r3
 8002514:	4643      	mov	r3, r8
 8002516:	18e3      	adds	r3, r4, r3
 8002518:	603b      	str	r3, [r7, #0]
 800251a:	464b      	mov	r3, r9
 800251c:	eb45 0303 	adc.w	r3, r5, r3
 8002520:	607b      	str	r3, [r7, #4]
 8002522:	f04f 0200 	mov.w	r2, #0
 8002526:	f04f 0300 	mov.w	r3, #0
 800252a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800252e:	4629      	mov	r1, r5
 8002530:	028b      	lsls	r3, r1, #10
 8002532:	4621      	mov	r1, r4
 8002534:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002538:	4621      	mov	r1, r4
 800253a:	028a      	lsls	r2, r1, #10
 800253c:	4610      	mov	r0, r2
 800253e:	4619      	mov	r1, r3
 8002540:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002542:	2200      	movs	r2, #0
 8002544:	61bb      	str	r3, [r7, #24]
 8002546:	61fa      	str	r2, [r7, #28]
 8002548:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800254c:	f7fe f9b2 	bl	80008b4 <__aeabi_uldivmod>
 8002550:	4602      	mov	r2, r0
 8002552:	460b      	mov	r3, r1
 8002554:	4613      	mov	r3, r2
 8002556:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002558:	4b0b      	ldr	r3, [pc, #44]	; (8002588 <HAL_RCC_GetSysClockFreq+0x200>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	0c1b      	lsrs	r3, r3, #16
 800255e:	f003 0303 	and.w	r3, r3, #3
 8002562:	3301      	adds	r3, #1
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002568:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800256a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800256c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002570:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002572:	e002      	b.n	800257a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002574:	4b05      	ldr	r3, [pc, #20]	; (800258c <HAL_RCC_GetSysClockFreq+0x204>)
 8002576:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002578:	bf00      	nop
    }
  }
  return sysclockfreq;
 800257a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800257c:	4618      	mov	r0, r3
 800257e:	3750      	adds	r7, #80	; 0x50
 8002580:	46bd      	mov	sp, r7
 8002582:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002586:	bf00      	nop
 8002588:	40023800 	.word	0x40023800
 800258c:	00f42400 	.word	0x00f42400
 8002590:	007a1200 	.word	0x007a1200

08002594 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e273      	b.n	8002a8e <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d075      	beq.n	800269e <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80025b2:	4b88      	ldr	r3, [pc, #544]	; (80027d4 <HAL_RCC_OscConfig+0x240>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f003 030c 	and.w	r3, r3, #12
 80025ba:	2b04      	cmp	r3, #4
 80025bc:	d00c      	beq.n	80025d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025be:	4b85      	ldr	r3, [pc, #532]	; (80027d4 <HAL_RCC_OscConfig+0x240>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80025c6:	2b08      	cmp	r3, #8
 80025c8:	d112      	bne.n	80025f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025ca:	4b82      	ldr	r3, [pc, #520]	; (80027d4 <HAL_RCC_OscConfig+0x240>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025d6:	d10b      	bne.n	80025f0 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d8:	4b7e      	ldr	r3, [pc, #504]	; (80027d4 <HAL_RCC_OscConfig+0x240>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d05b      	beq.n	800269c <HAL_RCC_OscConfig+0x108>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d157      	bne.n	800269c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e24e      	b.n	8002a8e <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025f8:	d106      	bne.n	8002608 <HAL_RCC_OscConfig+0x74>
 80025fa:	4b76      	ldr	r3, [pc, #472]	; (80027d4 <HAL_RCC_OscConfig+0x240>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a75      	ldr	r2, [pc, #468]	; (80027d4 <HAL_RCC_OscConfig+0x240>)
 8002600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002604:	6013      	str	r3, [r2, #0]
 8002606:	e01d      	b.n	8002644 <HAL_RCC_OscConfig+0xb0>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002610:	d10c      	bne.n	800262c <HAL_RCC_OscConfig+0x98>
 8002612:	4b70      	ldr	r3, [pc, #448]	; (80027d4 <HAL_RCC_OscConfig+0x240>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a6f      	ldr	r2, [pc, #444]	; (80027d4 <HAL_RCC_OscConfig+0x240>)
 8002618:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800261c:	6013      	str	r3, [r2, #0]
 800261e:	4b6d      	ldr	r3, [pc, #436]	; (80027d4 <HAL_RCC_OscConfig+0x240>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a6c      	ldr	r2, [pc, #432]	; (80027d4 <HAL_RCC_OscConfig+0x240>)
 8002624:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002628:	6013      	str	r3, [r2, #0]
 800262a:	e00b      	b.n	8002644 <HAL_RCC_OscConfig+0xb0>
 800262c:	4b69      	ldr	r3, [pc, #420]	; (80027d4 <HAL_RCC_OscConfig+0x240>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a68      	ldr	r2, [pc, #416]	; (80027d4 <HAL_RCC_OscConfig+0x240>)
 8002632:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002636:	6013      	str	r3, [r2, #0]
 8002638:	4b66      	ldr	r3, [pc, #408]	; (80027d4 <HAL_RCC_OscConfig+0x240>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a65      	ldr	r2, [pc, #404]	; (80027d4 <HAL_RCC_OscConfig+0x240>)
 800263e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002642:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d013      	beq.n	8002674 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264c:	f7fe fe2e 	bl	80012ac <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002654:	f7fe fe2a 	bl	80012ac <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b64      	cmp	r3, #100	; 0x64
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e213      	b.n	8002a8e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002666:	4b5b      	ldr	r3, [pc, #364]	; (80027d4 <HAL_RCC_OscConfig+0x240>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d0f0      	beq.n	8002654 <HAL_RCC_OscConfig+0xc0>
 8002672:	e014      	b.n	800269e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002674:	f7fe fe1a 	bl	80012ac <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800267a:	e008      	b.n	800268e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800267c:	f7fe fe16 	bl	80012ac <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b64      	cmp	r3, #100	; 0x64
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e1ff      	b.n	8002a8e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800268e:	4b51      	ldr	r3, [pc, #324]	; (80027d4 <HAL_RCC_OscConfig+0x240>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1f0      	bne.n	800267c <HAL_RCC_OscConfig+0xe8>
 800269a:	e000      	b.n	800269e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800269c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d063      	beq.n	8002772 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80026aa:	4b4a      	ldr	r3, [pc, #296]	; (80027d4 <HAL_RCC_OscConfig+0x240>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 030c 	and.w	r3, r3, #12
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00b      	beq.n	80026ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026b6:	4b47      	ldr	r3, [pc, #284]	; (80027d4 <HAL_RCC_OscConfig+0x240>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80026be:	2b08      	cmp	r3, #8
 80026c0:	d11c      	bne.n	80026fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026c2:	4b44      	ldr	r3, [pc, #272]	; (80027d4 <HAL_RCC_OscConfig+0x240>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d116      	bne.n	80026fc <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ce:	4b41      	ldr	r3, [pc, #260]	; (80027d4 <HAL_RCC_OscConfig+0x240>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d005      	beq.n	80026e6 <HAL_RCC_OscConfig+0x152>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d001      	beq.n	80026e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e1d3      	b.n	8002a8e <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e6:	4b3b      	ldr	r3, [pc, #236]	; (80027d4 <HAL_RCC_OscConfig+0x240>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	4937      	ldr	r1, [pc, #220]	; (80027d4 <HAL_RCC_OscConfig+0x240>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026fa:	e03a      	b.n	8002772 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d020      	beq.n	8002746 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002704:	4b34      	ldr	r3, [pc, #208]	; (80027d8 <HAL_RCC_OscConfig+0x244>)
 8002706:	2201      	movs	r2, #1
 8002708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270a:	f7fe fdcf 	bl	80012ac <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002710:	e008      	b.n	8002724 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002712:	f7fe fdcb 	bl	80012ac <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e1b4      	b.n	8002a8e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002724:	4b2b      	ldr	r3, [pc, #172]	; (80027d4 <HAL_RCC_OscConfig+0x240>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0f0      	beq.n	8002712 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002730:	4b28      	ldr	r3, [pc, #160]	; (80027d4 <HAL_RCC_OscConfig+0x240>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	4925      	ldr	r1, [pc, #148]	; (80027d4 <HAL_RCC_OscConfig+0x240>)
 8002740:	4313      	orrs	r3, r2
 8002742:	600b      	str	r3, [r1, #0]
 8002744:	e015      	b.n	8002772 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002746:	4b24      	ldr	r3, [pc, #144]	; (80027d8 <HAL_RCC_OscConfig+0x244>)
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800274c:	f7fe fdae 	bl	80012ac <HAL_GetTick>
 8002750:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002752:	e008      	b.n	8002766 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002754:	f7fe fdaa 	bl	80012ac <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e193      	b.n	8002a8e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002766:	4b1b      	ldr	r3, [pc, #108]	; (80027d4 <HAL_RCC_OscConfig+0x240>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1f0      	bne.n	8002754 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0308 	and.w	r3, r3, #8
 800277a:	2b00      	cmp	r3, #0
 800277c:	d036      	beq.n	80027ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	695b      	ldr	r3, [r3, #20]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d016      	beq.n	80027b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002786:	4b15      	ldr	r3, [pc, #84]	; (80027dc <HAL_RCC_OscConfig+0x248>)
 8002788:	2201      	movs	r2, #1
 800278a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800278c:	f7fe fd8e 	bl	80012ac <HAL_GetTick>
 8002790:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002792:	e008      	b.n	80027a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002794:	f7fe fd8a 	bl	80012ac <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e173      	b.n	8002a8e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027a6:	4b0b      	ldr	r3, [pc, #44]	; (80027d4 <HAL_RCC_OscConfig+0x240>)
 80027a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d0f0      	beq.n	8002794 <HAL_RCC_OscConfig+0x200>
 80027b2:	e01b      	b.n	80027ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027b4:	4b09      	ldr	r3, [pc, #36]	; (80027dc <HAL_RCC_OscConfig+0x248>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ba:	f7fe fd77 	bl	80012ac <HAL_GetTick>
 80027be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027c0:	e00e      	b.n	80027e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027c2:	f7fe fd73 	bl	80012ac <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d907      	bls.n	80027e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e15c      	b.n	8002a8e <HAL_RCC_OscConfig+0x4fa>
 80027d4:	40023800 	.word	0x40023800
 80027d8:	42470000 	.word	0x42470000
 80027dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027e0:	4b8a      	ldr	r3, [pc, #552]	; (8002a0c <HAL_RCC_OscConfig+0x478>)
 80027e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1ea      	bne.n	80027c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0304 	and.w	r3, r3, #4
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f000 8097 	beq.w	8002928 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027fa:	2300      	movs	r3, #0
 80027fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027fe:	4b83      	ldr	r3, [pc, #524]	; (8002a0c <HAL_RCC_OscConfig+0x478>)
 8002800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d10f      	bne.n	800282a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800280a:	2300      	movs	r3, #0
 800280c:	60bb      	str	r3, [r7, #8]
 800280e:	4b7f      	ldr	r3, [pc, #508]	; (8002a0c <HAL_RCC_OscConfig+0x478>)
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	4a7e      	ldr	r2, [pc, #504]	; (8002a0c <HAL_RCC_OscConfig+0x478>)
 8002814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002818:	6413      	str	r3, [r2, #64]	; 0x40
 800281a:	4b7c      	ldr	r3, [pc, #496]	; (8002a0c <HAL_RCC_OscConfig+0x478>)
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002822:	60bb      	str	r3, [r7, #8]
 8002824:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002826:	2301      	movs	r3, #1
 8002828:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800282a:	4b79      	ldr	r3, [pc, #484]	; (8002a10 <HAL_RCC_OscConfig+0x47c>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002832:	2b00      	cmp	r3, #0
 8002834:	d118      	bne.n	8002868 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002836:	4b76      	ldr	r3, [pc, #472]	; (8002a10 <HAL_RCC_OscConfig+0x47c>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a75      	ldr	r2, [pc, #468]	; (8002a10 <HAL_RCC_OscConfig+0x47c>)
 800283c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002840:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002842:	f7fe fd33 	bl	80012ac <HAL_GetTick>
 8002846:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002848:	e008      	b.n	800285c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800284a:	f7fe fd2f 	bl	80012ac <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b02      	cmp	r3, #2
 8002856:	d901      	bls.n	800285c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e118      	b.n	8002a8e <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800285c:	4b6c      	ldr	r3, [pc, #432]	; (8002a10 <HAL_RCC_OscConfig+0x47c>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002864:	2b00      	cmp	r3, #0
 8002866:	d0f0      	beq.n	800284a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d106      	bne.n	800287e <HAL_RCC_OscConfig+0x2ea>
 8002870:	4b66      	ldr	r3, [pc, #408]	; (8002a0c <HAL_RCC_OscConfig+0x478>)
 8002872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002874:	4a65      	ldr	r2, [pc, #404]	; (8002a0c <HAL_RCC_OscConfig+0x478>)
 8002876:	f043 0301 	orr.w	r3, r3, #1
 800287a:	6713      	str	r3, [r2, #112]	; 0x70
 800287c:	e01c      	b.n	80028b8 <HAL_RCC_OscConfig+0x324>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	2b05      	cmp	r3, #5
 8002884:	d10c      	bne.n	80028a0 <HAL_RCC_OscConfig+0x30c>
 8002886:	4b61      	ldr	r3, [pc, #388]	; (8002a0c <HAL_RCC_OscConfig+0x478>)
 8002888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800288a:	4a60      	ldr	r2, [pc, #384]	; (8002a0c <HAL_RCC_OscConfig+0x478>)
 800288c:	f043 0304 	orr.w	r3, r3, #4
 8002890:	6713      	str	r3, [r2, #112]	; 0x70
 8002892:	4b5e      	ldr	r3, [pc, #376]	; (8002a0c <HAL_RCC_OscConfig+0x478>)
 8002894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002896:	4a5d      	ldr	r2, [pc, #372]	; (8002a0c <HAL_RCC_OscConfig+0x478>)
 8002898:	f043 0301 	orr.w	r3, r3, #1
 800289c:	6713      	str	r3, [r2, #112]	; 0x70
 800289e:	e00b      	b.n	80028b8 <HAL_RCC_OscConfig+0x324>
 80028a0:	4b5a      	ldr	r3, [pc, #360]	; (8002a0c <HAL_RCC_OscConfig+0x478>)
 80028a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a4:	4a59      	ldr	r2, [pc, #356]	; (8002a0c <HAL_RCC_OscConfig+0x478>)
 80028a6:	f023 0301 	bic.w	r3, r3, #1
 80028aa:	6713      	str	r3, [r2, #112]	; 0x70
 80028ac:	4b57      	ldr	r3, [pc, #348]	; (8002a0c <HAL_RCC_OscConfig+0x478>)
 80028ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b0:	4a56      	ldr	r2, [pc, #344]	; (8002a0c <HAL_RCC_OscConfig+0x478>)
 80028b2:	f023 0304 	bic.w	r3, r3, #4
 80028b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d015      	beq.n	80028ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c0:	f7fe fcf4 	bl	80012ac <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028c6:	e00a      	b.n	80028de <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028c8:	f7fe fcf0 	bl	80012ac <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e0d7      	b.n	8002a8e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028de:	4b4b      	ldr	r3, [pc, #300]	; (8002a0c <HAL_RCC_OscConfig+0x478>)
 80028e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d0ee      	beq.n	80028c8 <HAL_RCC_OscConfig+0x334>
 80028ea:	e014      	b.n	8002916 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ec:	f7fe fcde 	bl	80012ac <HAL_GetTick>
 80028f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028f2:	e00a      	b.n	800290a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028f4:	f7fe fcda 	bl	80012ac <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002902:	4293      	cmp	r3, r2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e0c1      	b.n	8002a8e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800290a:	4b40      	ldr	r3, [pc, #256]	; (8002a0c <HAL_RCC_OscConfig+0x478>)
 800290c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1ee      	bne.n	80028f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002916:	7dfb      	ldrb	r3, [r7, #23]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d105      	bne.n	8002928 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800291c:	4b3b      	ldr	r3, [pc, #236]	; (8002a0c <HAL_RCC_OscConfig+0x478>)
 800291e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002920:	4a3a      	ldr	r2, [pc, #232]	; (8002a0c <HAL_RCC_OscConfig+0x478>)
 8002922:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002926:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	2b00      	cmp	r3, #0
 800292e:	f000 80ad 	beq.w	8002a8c <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002932:	4b36      	ldr	r3, [pc, #216]	; (8002a0c <HAL_RCC_OscConfig+0x478>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f003 030c 	and.w	r3, r3, #12
 800293a:	2b08      	cmp	r3, #8
 800293c:	d060      	beq.n	8002a00 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	2b02      	cmp	r3, #2
 8002944:	d145      	bne.n	80029d2 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002946:	4b33      	ldr	r3, [pc, #204]	; (8002a14 <HAL_RCC_OscConfig+0x480>)
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294c:	f7fe fcae 	bl	80012ac <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002954:	f7fe fcaa 	bl	80012ac <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e093      	b.n	8002a8e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002966:	4b29      	ldr	r3, [pc, #164]	; (8002a0c <HAL_RCC_OscConfig+0x478>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1f0      	bne.n	8002954 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	69da      	ldr	r2, [r3, #28]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a1b      	ldr	r3, [r3, #32]
 800297a:	431a      	orrs	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002980:	019b      	lsls	r3, r3, #6
 8002982:	431a      	orrs	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002988:	085b      	lsrs	r3, r3, #1
 800298a:	3b01      	subs	r3, #1
 800298c:	041b      	lsls	r3, r3, #16
 800298e:	431a      	orrs	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002994:	061b      	lsls	r3, r3, #24
 8002996:	431a      	orrs	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299c:	071b      	lsls	r3, r3, #28
 800299e:	491b      	ldr	r1, [pc, #108]	; (8002a0c <HAL_RCC_OscConfig+0x478>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029a4:	4b1b      	ldr	r3, [pc, #108]	; (8002a14 <HAL_RCC_OscConfig+0x480>)
 80029a6:	2201      	movs	r2, #1
 80029a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029aa:	f7fe fc7f 	bl	80012ac <HAL_GetTick>
 80029ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029b0:	e008      	b.n	80029c4 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029b2:	f7fe fc7b 	bl	80012ac <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e064      	b.n	8002a8e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029c4:	4b11      	ldr	r3, [pc, #68]	; (8002a0c <HAL_RCC_OscConfig+0x478>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d0f0      	beq.n	80029b2 <HAL_RCC_OscConfig+0x41e>
 80029d0:	e05c      	b.n	8002a8c <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029d2:	4b10      	ldr	r3, [pc, #64]	; (8002a14 <HAL_RCC_OscConfig+0x480>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d8:	f7fe fc68 	bl	80012ac <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029de:	e008      	b.n	80029f2 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029e0:	f7fe fc64 	bl	80012ac <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e04d      	b.n	8002a8e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029f2:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <HAL_RCC_OscConfig+0x478>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1f0      	bne.n	80029e0 <HAL_RCC_OscConfig+0x44c>
 80029fe:	e045      	b.n	8002a8c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d107      	bne.n	8002a18 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e040      	b.n	8002a8e <HAL_RCC_OscConfig+0x4fa>
 8002a0c:	40023800 	.word	0x40023800
 8002a10:	40007000 	.word	0x40007000
 8002a14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a18:	4b1f      	ldr	r3, [pc, #124]	; (8002a98 <HAL_RCC_OscConfig+0x504>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d030      	beq.n	8002a88 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d129      	bne.n	8002a88 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d122      	bne.n	8002a88 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a48:	4013      	ands	r3, r2
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d119      	bne.n	8002a88 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5e:	085b      	lsrs	r3, r3, #1
 8002a60:	3b01      	subs	r3, #1
 8002a62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d10f      	bne.n	8002a88 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d107      	bne.n	8002a88 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a82:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d001      	beq.n	8002a8c <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e000      	b.n	8002a8e <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3718      	adds	r7, #24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	40023800 	.word	0x40023800

08002a9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e041      	b.n	8002b32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d106      	bne.n	8002ac8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f7fe fae6 	bl	8001094 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2202      	movs	r2, #2
 8002acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	3304      	adds	r3, #4
 8002ad8:	4619      	mov	r1, r3
 8002ada:	4610      	mov	r0, r2
 8002adc:	f000 f9ae 	bl	8002e3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
	...

08002b3c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d001      	beq.n	8002b54 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e02d      	b.n	8002bb0 <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2202      	movs	r2, #2
 8002b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a16      	ldr	r2, [pc, #88]	; (8002bbc <HAL_TIM_Base_Start+0x80>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d009      	beq.n	8002b7a <HAL_TIM_Base_Start+0x3e>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a15      	ldr	r2, [pc, #84]	; (8002bc0 <HAL_TIM_Base_Start+0x84>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d004      	beq.n	8002b7a <HAL_TIM_Base_Start+0x3e>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a13      	ldr	r2, [pc, #76]	; (8002bc4 <HAL_TIM_Base_Start+0x88>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d111      	bne.n	8002b9e <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f003 0307 	and.w	r3, r3, #7
 8002b84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2b06      	cmp	r3, #6
 8002b8a:	d010      	beq.n	8002bae <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f042 0201 	orr.w	r2, r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b9c:	e007      	b.n	8002bae <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f042 0201 	orr.w	r2, r2, #1
 8002bac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3714      	adds	r7, #20
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr
 8002bbc:	40010000 	.word	0x40010000
 8002bc0:	40000c00 	.word	0x40000c00
 8002bc4:	40014000 	.word	0x40014000

08002bc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d122      	bne.n	8002c24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d11b      	bne.n	8002c24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f06f 0202 	mvn.w	r2, #2
 8002bf4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	f003 0303 	and.w	r3, r3, #3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d003      	beq.n	8002c12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 f8f8 	bl	8002e00 <HAL_TIM_IC_CaptureCallback>
 8002c10:	e005      	b.n	8002c1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 f8ea 	bl	8002dec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f000 f8fb 	bl	8002e14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	f003 0304 	and.w	r3, r3, #4
 8002c2e:	2b04      	cmp	r3, #4
 8002c30:	d122      	bne.n	8002c78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	f003 0304 	and.w	r3, r3, #4
 8002c3c:	2b04      	cmp	r3, #4
 8002c3e:	d11b      	bne.n	8002c78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f06f 0204 	mvn.w	r2, #4
 8002c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2202      	movs	r2, #2
 8002c4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 f8ce 	bl	8002e00 <HAL_TIM_IC_CaptureCallback>
 8002c64:	e005      	b.n	8002c72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 f8c0 	bl	8002dec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 f8d1 	bl	8002e14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	f003 0308 	and.w	r3, r3, #8
 8002c82:	2b08      	cmp	r3, #8
 8002c84:	d122      	bne.n	8002ccc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	f003 0308 	and.w	r3, r3, #8
 8002c90:	2b08      	cmp	r3, #8
 8002c92:	d11b      	bne.n	8002ccc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f06f 0208 	mvn.w	r2, #8
 8002c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2204      	movs	r2, #4
 8002ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	f003 0303 	and.w	r3, r3, #3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f8a4 	bl	8002e00 <HAL_TIM_IC_CaptureCallback>
 8002cb8:	e005      	b.n	8002cc6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f896 	bl	8002dec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f000 f8a7 	bl	8002e14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	f003 0310 	and.w	r3, r3, #16
 8002cd6:	2b10      	cmp	r3, #16
 8002cd8:	d122      	bne.n	8002d20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	f003 0310 	and.w	r3, r3, #16
 8002ce4:	2b10      	cmp	r3, #16
 8002ce6:	d11b      	bne.n	8002d20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f06f 0210 	mvn.w	r2, #16
 8002cf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2208      	movs	r2, #8
 8002cf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	69db      	ldr	r3, [r3, #28]
 8002cfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d003      	beq.n	8002d0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 f87a 	bl	8002e00 <HAL_TIM_IC_CaptureCallback>
 8002d0c:	e005      	b.n	8002d1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 f86c 	bl	8002dec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 f87d 	bl	8002e14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d10e      	bne.n	8002d4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	f003 0301 	and.w	r3, r3, #1
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d107      	bne.n	8002d4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f06f 0201 	mvn.w	r2, #1
 8002d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 f846 	bl	8002dd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d56:	2b80      	cmp	r3, #128	; 0x80
 8002d58:	d10e      	bne.n	8002d78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d64:	2b80      	cmp	r3, #128	; 0x80
 8002d66:	d107      	bne.n	8002d78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 f924 	bl	8002fc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d82:	2b40      	cmp	r3, #64	; 0x40
 8002d84:	d10e      	bne.n	8002da4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d90:	2b40      	cmp	r3, #64	; 0x40
 8002d92:	d107      	bne.n	8002da4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 f842 	bl	8002e28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	f003 0320 	and.w	r3, r3, #32
 8002dae:	2b20      	cmp	r3, #32
 8002db0:	d10e      	bne.n	8002dd0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	f003 0320 	and.w	r3, r3, #32
 8002dbc:	2b20      	cmp	r3, #32
 8002dbe:	d107      	bne.n	8002dd0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f06f 0220 	mvn.w	r2, #32
 8002dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 f8ee 	bl	8002fac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002dd0:	bf00      	nop
 8002dd2:	3708      	adds	r7, #8
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a26      	ldr	r2, [pc, #152]	; (8002ee8 <TIM_Base_SetConfig+0xac>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d003      	beq.n	8002e5c <TIM_Base_SetConfig+0x20>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a25      	ldr	r2, [pc, #148]	; (8002eec <TIM_Base_SetConfig+0xb0>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d108      	bne.n	8002e6e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a1d      	ldr	r2, [pc, #116]	; (8002ee8 <TIM_Base_SetConfig+0xac>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d00b      	beq.n	8002e8e <TIM_Base_SetConfig+0x52>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a1c      	ldr	r2, [pc, #112]	; (8002eec <TIM_Base_SetConfig+0xb0>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d007      	beq.n	8002e8e <TIM_Base_SetConfig+0x52>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a1b      	ldr	r2, [pc, #108]	; (8002ef0 <TIM_Base_SetConfig+0xb4>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d003      	beq.n	8002e8e <TIM_Base_SetConfig+0x52>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a1a      	ldr	r2, [pc, #104]	; (8002ef4 <TIM_Base_SetConfig+0xb8>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d108      	bne.n	8002ea0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	68fa      	ldr	r2, [r7, #12]
 8002eb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	689a      	ldr	r2, [r3, #8]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a08      	ldr	r2, [pc, #32]	; (8002ee8 <TIM_Base_SetConfig+0xac>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d103      	bne.n	8002ed4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	691a      	ldr	r2, [r3, #16]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	615a      	str	r2, [r3, #20]
}
 8002eda:	bf00      	nop
 8002edc:	3714      	adds	r7, #20
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	40010000 	.word	0x40010000
 8002eec:	40000c00 	.word	0x40000c00
 8002ef0:	40014000 	.word	0x40014000
 8002ef4:	40014800 	.word	0x40014800

08002ef8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d101      	bne.n	8002f10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	e041      	b.n	8002f94 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a14      	ldr	r2, [pc, #80]	; (8002fa0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d009      	beq.n	8002f68 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a12      	ldr	r2, [pc, #72]	; (8002fa4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d004      	beq.n	8002f68 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a11      	ldr	r2, [pc, #68]	; (8002fa8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d10c      	bne.n	8002f82 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f6e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	68ba      	ldr	r2, [r7, #8]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68ba      	ldr	r2, [r7, #8]
 8002f80:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2201      	movs	r2, #1
 8002f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3714      	adds	r7, #20
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr
 8002fa0:	40010000 	.word	0x40010000
 8002fa4:	40000c00 	.word	0x40000c00
 8002fa8:	40014000 	.word	0x40014000

08002fac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <__libc_init_array>:
 8002fd4:	b570      	push	{r4, r5, r6, lr}
 8002fd6:	4d0d      	ldr	r5, [pc, #52]	; (800300c <__libc_init_array+0x38>)
 8002fd8:	4c0d      	ldr	r4, [pc, #52]	; (8003010 <__libc_init_array+0x3c>)
 8002fda:	1b64      	subs	r4, r4, r5
 8002fdc:	10a4      	asrs	r4, r4, #2
 8002fde:	2600      	movs	r6, #0
 8002fe0:	42a6      	cmp	r6, r4
 8002fe2:	d109      	bne.n	8002ff8 <__libc_init_array+0x24>
 8002fe4:	4d0b      	ldr	r5, [pc, #44]	; (8003014 <__libc_init_array+0x40>)
 8002fe6:	4c0c      	ldr	r4, [pc, #48]	; (8003018 <__libc_init_array+0x44>)
 8002fe8:	f000 fe0a 	bl	8003c00 <_init>
 8002fec:	1b64      	subs	r4, r4, r5
 8002fee:	10a4      	asrs	r4, r4, #2
 8002ff0:	2600      	movs	r6, #0
 8002ff2:	42a6      	cmp	r6, r4
 8002ff4:	d105      	bne.n	8003002 <__libc_init_array+0x2e>
 8002ff6:	bd70      	pop	{r4, r5, r6, pc}
 8002ff8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ffc:	4798      	blx	r3
 8002ffe:	3601      	adds	r6, #1
 8003000:	e7ee      	b.n	8002fe0 <__libc_init_array+0xc>
 8003002:	f855 3b04 	ldr.w	r3, [r5], #4
 8003006:	4798      	blx	r3
 8003008:	3601      	adds	r6, #1
 800300a:	e7f2      	b.n	8002ff2 <__libc_init_array+0x1e>
 800300c:	08004018 	.word	0x08004018
 8003010:	08004018 	.word	0x08004018
 8003014:	08004018 	.word	0x08004018
 8003018:	0800401c 	.word	0x0800401c

0800301c <memset>:
 800301c:	4402      	add	r2, r0
 800301e:	4603      	mov	r3, r0
 8003020:	4293      	cmp	r3, r2
 8003022:	d100      	bne.n	8003026 <memset+0xa>
 8003024:	4770      	bx	lr
 8003026:	f803 1b01 	strb.w	r1, [r3], #1
 800302a:	e7f9      	b.n	8003020 <memset+0x4>

0800302c <rint>:
 800302c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800302e:	ec51 0b10 	vmov	r0, r1, d0
 8003032:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8003036:	f2a2 35ff 	subw	r5, r2, #1023	; 0x3ff
 800303a:	2d13      	cmp	r5, #19
 800303c:	ee10 3a10 	vmov	r3, s0
 8003040:	460c      	mov	r4, r1
 8003042:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 8003046:	dc5b      	bgt.n	8003100 <rint+0xd4>
 8003048:	2d00      	cmp	r5, #0
 800304a:	da2d      	bge.n	80030a8 <rint+0x7c>
 800304c:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8003050:	4302      	orrs	r2, r0
 8003052:	d025      	beq.n	80030a0 <rint+0x74>
 8003054:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8003058:	4302      	orrs	r2, r0
 800305a:	4253      	negs	r3, r2
 800305c:	4313      	orrs	r3, r2
 800305e:	0b1b      	lsrs	r3, r3, #12
 8003060:	0c4a      	lsrs	r2, r1, #17
 8003062:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003066:	0452      	lsls	r2, r2, #17
 8003068:	ea43 0102 	orr.w	r1, r3, r2
 800306c:	460b      	mov	r3, r1
 800306e:	4934      	ldr	r1, [pc, #208]	; (8003140 <rint+0x114>)
 8003070:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 8003074:	e9d6 6700 	ldrd	r6, r7, [r6]
 8003078:	4602      	mov	r2, r0
 800307a:	4639      	mov	r1, r7
 800307c:	4630      	mov	r0, r6
 800307e:	f7fd f9f3 	bl	8000468 <__adddf3>
 8003082:	e9cd 0100 	strd	r0, r1, [sp]
 8003086:	463b      	mov	r3, r7
 8003088:	e9dd 0100 	ldrd	r0, r1, [sp]
 800308c:	4632      	mov	r2, r6
 800308e:	f7fd f9e9 	bl	8000464 <__aeabi_dsub>
 8003092:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
 8003096:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800309a:	ea43 0704 	orr.w	r7, r3, r4
 800309e:	4639      	mov	r1, r7
 80030a0:	ec41 0b10 	vmov	d0, r0, r1
 80030a4:	b003      	add	sp, #12
 80030a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030a8:	4a26      	ldr	r2, [pc, #152]	; (8003144 <rint+0x118>)
 80030aa:	412a      	asrs	r2, r5
 80030ac:	ea01 0702 	and.w	r7, r1, r2
 80030b0:	4307      	orrs	r7, r0
 80030b2:	d0f5      	beq.n	80030a0 <rint+0x74>
 80030b4:	0851      	lsrs	r1, r2, #1
 80030b6:	ea04 0252 	and.w	r2, r4, r2, lsr #1
 80030ba:	4313      	orrs	r3, r2
 80030bc:	d00c      	beq.n	80030d8 <rint+0xac>
 80030be:	ea24 0201 	bic.w	r2, r4, r1
 80030c2:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 80030c6:	2d13      	cmp	r5, #19
 80030c8:	fa44 f505 	asr.w	r5, r4, r5
 80030cc:	bf0c      	ite	eq
 80030ce:	f04f 4300 	moveq.w	r3, #2147483648	; 0x80000000
 80030d2:	2300      	movne	r3, #0
 80030d4:	ea42 0405 	orr.w	r4, r2, r5
 80030d8:	4919      	ldr	r1, [pc, #100]	; (8003140 <rint+0x114>)
 80030da:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 80030de:	461a      	mov	r2, r3
 80030e0:	4623      	mov	r3, r4
 80030e2:	e9d6 4500 	ldrd	r4, r5, [r6]
 80030e6:	4620      	mov	r0, r4
 80030e8:	4629      	mov	r1, r5
 80030ea:	f7fd f9bd 	bl	8000468 <__adddf3>
 80030ee:	e9cd 0100 	strd	r0, r1, [sp]
 80030f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80030f6:	4622      	mov	r2, r4
 80030f8:	462b      	mov	r3, r5
 80030fa:	f7fd f9b3 	bl	8000464 <__aeabi_dsub>
 80030fe:	e7cf      	b.n	80030a0 <rint+0x74>
 8003100:	2d33      	cmp	r5, #51	; 0x33
 8003102:	dd08      	ble.n	8003116 <rint+0xea>
 8003104:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8003108:	d1ca      	bne.n	80030a0 <rint+0x74>
 800310a:	ee10 2a10 	vmov	r2, s0
 800310e:	460b      	mov	r3, r1
 8003110:	f7fd f9aa 	bl	8000468 <__adddf3>
 8003114:	e7c4      	b.n	80030a0 <rint+0x74>
 8003116:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800311a:	f04f 35ff 	mov.w	r5, #4294967295
 800311e:	40d5      	lsrs	r5, r2
 8003120:	4228      	tst	r0, r5
 8003122:	d0bd      	beq.n	80030a0 <rint+0x74>
 8003124:	ea13 0055 	ands.w	r0, r3, r5, lsr #1
 8003128:	ea4f 0155 	mov.w	r1, r5, lsr #1
 800312c:	bf1f      	itttt	ne
 800312e:	ea23 0101 	bicne.w	r1, r3, r1
 8003132:	f04f 4380 	movne.w	r3, #1073741824	; 0x40000000
 8003136:	fa43 f202 	asrne.w	r2, r3, r2
 800313a:	ea41 0302 	orrne.w	r3, r1, r2
 800313e:	e7cb      	b.n	80030d8 <rint+0xac>
 8003140:	08003c30 	.word	0x08003c30
 8003144:	000fffff 	.word	0x000fffff

08003148 <sinf>:
 8003148:	ee10 3a10 	vmov	r3, s0
 800314c:	b507      	push	{r0, r1, r2, lr}
 800314e:	4a1f      	ldr	r2, [pc, #124]	; (80031cc <sinf+0x84>)
 8003150:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003154:	4293      	cmp	r3, r2
 8003156:	dc07      	bgt.n	8003168 <sinf+0x20>
 8003158:	eddf 0a1d 	vldr	s1, [pc, #116]	; 80031d0 <sinf+0x88>
 800315c:	2000      	movs	r0, #0
 800315e:	b003      	add	sp, #12
 8003160:	f85d eb04 	ldr.w	lr, [sp], #4
 8003164:	f000 bc48 	b.w	80039f8 <__kernel_sinf>
 8003168:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800316c:	db04      	blt.n	8003178 <sinf+0x30>
 800316e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8003172:	b003      	add	sp, #12
 8003174:	f85d fb04 	ldr.w	pc, [sp], #4
 8003178:	4668      	mov	r0, sp
 800317a:	f000 f82b 	bl	80031d4 <__ieee754_rem_pio2f>
 800317e:	f000 0003 	and.w	r0, r0, #3
 8003182:	2801      	cmp	r0, #1
 8003184:	d00a      	beq.n	800319c <sinf+0x54>
 8003186:	2802      	cmp	r0, #2
 8003188:	d00f      	beq.n	80031aa <sinf+0x62>
 800318a:	b9c0      	cbnz	r0, 80031be <sinf+0x76>
 800318c:	eddd 0a01 	vldr	s1, [sp, #4]
 8003190:	ed9d 0a00 	vldr	s0, [sp]
 8003194:	2001      	movs	r0, #1
 8003196:	f000 fc2f 	bl	80039f8 <__kernel_sinf>
 800319a:	e7ea      	b.n	8003172 <sinf+0x2a>
 800319c:	eddd 0a01 	vldr	s1, [sp, #4]
 80031a0:	ed9d 0a00 	vldr	s0, [sp]
 80031a4:	f000 f952 	bl	800344c <__kernel_cosf>
 80031a8:	e7e3      	b.n	8003172 <sinf+0x2a>
 80031aa:	eddd 0a01 	vldr	s1, [sp, #4]
 80031ae:	ed9d 0a00 	vldr	s0, [sp]
 80031b2:	2001      	movs	r0, #1
 80031b4:	f000 fc20 	bl	80039f8 <__kernel_sinf>
 80031b8:	eeb1 0a40 	vneg.f32	s0, s0
 80031bc:	e7d9      	b.n	8003172 <sinf+0x2a>
 80031be:	eddd 0a01 	vldr	s1, [sp, #4]
 80031c2:	ed9d 0a00 	vldr	s0, [sp]
 80031c6:	f000 f941 	bl	800344c <__kernel_cosf>
 80031ca:	e7f5      	b.n	80031b8 <sinf+0x70>
 80031cc:	3f490fd8 	.word	0x3f490fd8
 80031d0:	00000000 	.word	0x00000000

080031d4 <__ieee754_rem_pio2f>:
 80031d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031d6:	ee10 6a10 	vmov	r6, s0
 80031da:	4b8e      	ldr	r3, [pc, #568]	; (8003414 <__ieee754_rem_pio2f+0x240>)
 80031dc:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80031e0:	429d      	cmp	r5, r3
 80031e2:	b087      	sub	sp, #28
 80031e4:	eef0 7a40 	vmov.f32	s15, s0
 80031e8:	4604      	mov	r4, r0
 80031ea:	dc05      	bgt.n	80031f8 <__ieee754_rem_pio2f+0x24>
 80031ec:	2300      	movs	r3, #0
 80031ee:	ed80 0a00 	vstr	s0, [r0]
 80031f2:	6043      	str	r3, [r0, #4]
 80031f4:	2000      	movs	r0, #0
 80031f6:	e01a      	b.n	800322e <__ieee754_rem_pio2f+0x5a>
 80031f8:	4b87      	ldr	r3, [pc, #540]	; (8003418 <__ieee754_rem_pio2f+0x244>)
 80031fa:	429d      	cmp	r5, r3
 80031fc:	dc46      	bgt.n	800328c <__ieee754_rem_pio2f+0xb8>
 80031fe:	2e00      	cmp	r6, #0
 8003200:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800341c <__ieee754_rem_pio2f+0x248>
 8003204:	4b86      	ldr	r3, [pc, #536]	; (8003420 <__ieee754_rem_pio2f+0x24c>)
 8003206:	f025 050f 	bic.w	r5, r5, #15
 800320a:	dd1f      	ble.n	800324c <__ieee754_rem_pio2f+0x78>
 800320c:	429d      	cmp	r5, r3
 800320e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8003212:	d00e      	beq.n	8003232 <__ieee754_rem_pio2f+0x5e>
 8003214:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8003424 <__ieee754_rem_pio2f+0x250>
 8003218:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800321c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8003220:	ed80 0a00 	vstr	s0, [r0]
 8003224:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003228:	2001      	movs	r0, #1
 800322a:	edc4 7a01 	vstr	s15, [r4, #4]
 800322e:	b007      	add	sp, #28
 8003230:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003232:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8003428 <__ieee754_rem_pio2f+0x254>
 8003236:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800342c <__ieee754_rem_pio2f+0x258>
 800323a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800323e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8003242:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003246:	edc0 6a00 	vstr	s13, [r0]
 800324a:	e7eb      	b.n	8003224 <__ieee754_rem_pio2f+0x50>
 800324c:	429d      	cmp	r5, r3
 800324e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8003252:	d00e      	beq.n	8003272 <__ieee754_rem_pio2f+0x9e>
 8003254:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8003424 <__ieee754_rem_pio2f+0x250>
 8003258:	ee37 0a87 	vadd.f32	s0, s15, s14
 800325c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8003260:	ed80 0a00 	vstr	s0, [r0]
 8003264:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003268:	f04f 30ff 	mov.w	r0, #4294967295
 800326c:	edc4 7a01 	vstr	s15, [r4, #4]
 8003270:	e7dd      	b.n	800322e <__ieee754_rem_pio2f+0x5a>
 8003272:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8003428 <__ieee754_rem_pio2f+0x254>
 8003276:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800342c <__ieee754_rem_pio2f+0x258>
 800327a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800327e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8003282:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003286:	edc0 6a00 	vstr	s13, [r0]
 800328a:	e7eb      	b.n	8003264 <__ieee754_rem_pio2f+0x90>
 800328c:	4b68      	ldr	r3, [pc, #416]	; (8003430 <__ieee754_rem_pio2f+0x25c>)
 800328e:	429d      	cmp	r5, r3
 8003290:	dc72      	bgt.n	8003378 <__ieee754_rem_pio2f+0x1a4>
 8003292:	f000 fbf9 	bl	8003a88 <fabsf>
 8003296:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8003434 <__ieee754_rem_pio2f+0x260>
 800329a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800329e:	eee0 7a07 	vfma.f32	s15, s0, s14
 80032a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032aa:	ee17 0a90 	vmov	r0, s15
 80032ae:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800341c <__ieee754_rem_pio2f+0x248>
 80032b2:	eea7 0a67 	vfms.f32	s0, s14, s15
 80032b6:	281f      	cmp	r0, #31
 80032b8:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8003424 <__ieee754_rem_pio2f+0x250>
 80032bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032c0:	eeb1 6a47 	vneg.f32	s12, s14
 80032c4:	ee70 6a67 	vsub.f32	s13, s0, s15
 80032c8:	ee16 2a90 	vmov	r2, s13
 80032cc:	dc1c      	bgt.n	8003308 <__ieee754_rem_pio2f+0x134>
 80032ce:	495a      	ldr	r1, [pc, #360]	; (8003438 <__ieee754_rem_pio2f+0x264>)
 80032d0:	1e47      	subs	r7, r0, #1
 80032d2:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80032d6:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80032da:	428b      	cmp	r3, r1
 80032dc:	d014      	beq.n	8003308 <__ieee754_rem_pio2f+0x134>
 80032de:	6022      	str	r2, [r4, #0]
 80032e0:	ed94 7a00 	vldr	s14, [r4]
 80032e4:	ee30 0a47 	vsub.f32	s0, s0, s14
 80032e8:	2e00      	cmp	r6, #0
 80032ea:	ee30 0a67 	vsub.f32	s0, s0, s15
 80032ee:	ed84 0a01 	vstr	s0, [r4, #4]
 80032f2:	da9c      	bge.n	800322e <__ieee754_rem_pio2f+0x5a>
 80032f4:	eeb1 7a47 	vneg.f32	s14, s14
 80032f8:	eeb1 0a40 	vneg.f32	s0, s0
 80032fc:	ed84 7a00 	vstr	s14, [r4]
 8003300:	ed84 0a01 	vstr	s0, [r4, #4]
 8003304:	4240      	negs	r0, r0
 8003306:	e792      	b.n	800322e <__ieee754_rem_pio2f+0x5a>
 8003308:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800330c:	15eb      	asrs	r3, r5, #23
 800330e:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8003312:	2d08      	cmp	r5, #8
 8003314:	dde3      	ble.n	80032de <__ieee754_rem_pio2f+0x10a>
 8003316:	eddf 7a44 	vldr	s15, [pc, #272]	; 8003428 <__ieee754_rem_pio2f+0x254>
 800331a:	eddf 5a44 	vldr	s11, [pc, #272]	; 800342c <__ieee754_rem_pio2f+0x258>
 800331e:	eef0 6a40 	vmov.f32	s13, s0
 8003322:	eee6 6a27 	vfma.f32	s13, s12, s15
 8003326:	ee30 0a66 	vsub.f32	s0, s0, s13
 800332a:	eea6 0a27 	vfma.f32	s0, s12, s15
 800332e:	eef0 7a40 	vmov.f32	s15, s0
 8003332:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8003336:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800333a:	ee15 2a90 	vmov	r2, s11
 800333e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8003342:	1a5b      	subs	r3, r3, r1
 8003344:	2b19      	cmp	r3, #25
 8003346:	dc04      	bgt.n	8003352 <__ieee754_rem_pio2f+0x17e>
 8003348:	edc4 5a00 	vstr	s11, [r4]
 800334c:	eeb0 0a66 	vmov.f32	s0, s13
 8003350:	e7c6      	b.n	80032e0 <__ieee754_rem_pio2f+0x10c>
 8003352:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800343c <__ieee754_rem_pio2f+0x268>
 8003356:	eeb0 0a66 	vmov.f32	s0, s13
 800335a:	eea6 0a25 	vfma.f32	s0, s12, s11
 800335e:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8003362:	eddf 6a37 	vldr	s13, [pc, #220]	; 8003440 <__ieee754_rem_pio2f+0x26c>
 8003366:	eee6 7a25 	vfma.f32	s15, s12, s11
 800336a:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800336e:	ee30 7a67 	vsub.f32	s14, s0, s15
 8003372:	ed84 7a00 	vstr	s14, [r4]
 8003376:	e7b3      	b.n	80032e0 <__ieee754_rem_pio2f+0x10c>
 8003378:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800337c:	db06      	blt.n	800338c <__ieee754_rem_pio2f+0x1b8>
 800337e:	ee70 7a40 	vsub.f32	s15, s0, s0
 8003382:	edc0 7a01 	vstr	s15, [r0, #4]
 8003386:	edc0 7a00 	vstr	s15, [r0]
 800338a:	e733      	b.n	80031f4 <__ieee754_rem_pio2f+0x20>
 800338c:	15ea      	asrs	r2, r5, #23
 800338e:	3a86      	subs	r2, #134	; 0x86
 8003390:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8003394:	ee07 3a90 	vmov	s15, r3
 8003398:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800339c:	eddf 6a29 	vldr	s13, [pc, #164]	; 8003444 <__ieee754_rem_pio2f+0x270>
 80033a0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80033a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80033a8:	ed8d 7a03 	vstr	s14, [sp, #12]
 80033ac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80033b0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80033b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80033b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80033bc:	ed8d 7a04 	vstr	s14, [sp, #16]
 80033c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80033c4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80033c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033cc:	edcd 7a05 	vstr	s15, [sp, #20]
 80033d0:	d11e      	bne.n	8003410 <__ieee754_rem_pio2f+0x23c>
 80033d2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80033d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033da:	bf14      	ite	ne
 80033dc:	2302      	movne	r3, #2
 80033de:	2301      	moveq	r3, #1
 80033e0:	4919      	ldr	r1, [pc, #100]	; (8003448 <__ieee754_rem_pio2f+0x274>)
 80033e2:	9101      	str	r1, [sp, #4]
 80033e4:	2102      	movs	r1, #2
 80033e6:	9100      	str	r1, [sp, #0]
 80033e8:	a803      	add	r0, sp, #12
 80033ea:	4621      	mov	r1, r4
 80033ec:	f000 f88e 	bl	800350c <__kernel_rem_pio2f>
 80033f0:	2e00      	cmp	r6, #0
 80033f2:	f6bf af1c 	bge.w	800322e <__ieee754_rem_pio2f+0x5a>
 80033f6:	edd4 7a00 	vldr	s15, [r4]
 80033fa:	eef1 7a67 	vneg.f32	s15, s15
 80033fe:	edc4 7a00 	vstr	s15, [r4]
 8003402:	edd4 7a01 	vldr	s15, [r4, #4]
 8003406:	eef1 7a67 	vneg.f32	s15, s15
 800340a:	edc4 7a01 	vstr	s15, [r4, #4]
 800340e:	e779      	b.n	8003304 <__ieee754_rem_pio2f+0x130>
 8003410:	2303      	movs	r3, #3
 8003412:	e7e5      	b.n	80033e0 <__ieee754_rem_pio2f+0x20c>
 8003414:	3f490fd8 	.word	0x3f490fd8
 8003418:	4016cbe3 	.word	0x4016cbe3
 800341c:	3fc90f80 	.word	0x3fc90f80
 8003420:	3fc90fd0 	.word	0x3fc90fd0
 8003424:	37354443 	.word	0x37354443
 8003428:	37354400 	.word	0x37354400
 800342c:	2e85a308 	.word	0x2e85a308
 8003430:	43490f80 	.word	0x43490f80
 8003434:	3f22f984 	.word	0x3f22f984
 8003438:	08003c40 	.word	0x08003c40
 800343c:	2e85a300 	.word	0x2e85a300
 8003440:	248d3132 	.word	0x248d3132
 8003444:	43800000 	.word	0x43800000
 8003448:	08003cc0 	.word	0x08003cc0

0800344c <__kernel_cosf>:
 800344c:	ee10 3a10 	vmov	r3, s0
 8003450:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003454:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8003458:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800345c:	da05      	bge.n	800346a <__kernel_cosf+0x1e>
 800345e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8003462:	ee17 2a90 	vmov	r2, s15
 8003466:	2a00      	cmp	r2, #0
 8003468:	d03d      	beq.n	80034e6 <__kernel_cosf+0x9a>
 800346a:	ee60 5a00 	vmul.f32	s11, s0, s0
 800346e:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80034ec <__kernel_cosf+0xa0>
 8003472:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80034f0 <__kernel_cosf+0xa4>
 8003476:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80034f4 <__kernel_cosf+0xa8>
 800347a:	4a1f      	ldr	r2, [pc, #124]	; (80034f8 <__kernel_cosf+0xac>)
 800347c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8003480:	4293      	cmp	r3, r2
 8003482:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80034fc <__kernel_cosf+0xb0>
 8003486:	eee7 7a25 	vfma.f32	s15, s14, s11
 800348a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003500 <__kernel_cosf+0xb4>
 800348e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8003492:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8003504 <__kernel_cosf+0xb8>
 8003496:	eee7 7a25 	vfma.f32	s15, s14, s11
 800349a:	eeb0 7a66 	vmov.f32	s14, s13
 800349e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80034a2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80034a6:	ee65 7aa6 	vmul.f32	s15, s11, s13
 80034aa:	ee67 6a25 	vmul.f32	s13, s14, s11
 80034ae:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 80034b2:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80034b6:	dc04      	bgt.n	80034c2 <__kernel_cosf+0x76>
 80034b8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80034bc:	ee36 0a47 	vsub.f32	s0, s12, s14
 80034c0:	4770      	bx	lr
 80034c2:	4a11      	ldr	r2, [pc, #68]	; (8003508 <__kernel_cosf+0xbc>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	bfda      	itte	le
 80034c8:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80034cc:	ee06 3a90 	vmovle	s13, r3
 80034d0:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 80034d4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80034d8:	ee36 0a66 	vsub.f32	s0, s12, s13
 80034dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80034e0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80034e4:	4770      	bx	lr
 80034e6:	eeb0 0a46 	vmov.f32	s0, s12
 80034ea:	4770      	bx	lr
 80034ec:	ad47d74e 	.word	0xad47d74e
 80034f0:	310f74f6 	.word	0x310f74f6
 80034f4:	3d2aaaab 	.word	0x3d2aaaab
 80034f8:	3e999999 	.word	0x3e999999
 80034fc:	b493f27c 	.word	0xb493f27c
 8003500:	37d00d01 	.word	0x37d00d01
 8003504:	bab60b61 	.word	0xbab60b61
 8003508:	3f480000 	.word	0x3f480000

0800350c <__kernel_rem_pio2f>:
 800350c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003510:	ed2d 8b04 	vpush	{d8-d9}
 8003514:	b0d9      	sub	sp, #356	; 0x164
 8003516:	4688      	mov	r8, r1
 8003518:	9002      	str	r0, [sp, #8]
 800351a:	49bb      	ldr	r1, [pc, #748]	; (8003808 <__kernel_rem_pio2f+0x2fc>)
 800351c:	9866      	ldr	r0, [sp, #408]	; 0x198
 800351e:	9301      	str	r3, [sp, #4]
 8003520:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8003524:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8003528:	1e59      	subs	r1, r3, #1
 800352a:	1d13      	adds	r3, r2, #4
 800352c:	db27      	blt.n	800357e <__kernel_rem_pio2f+0x72>
 800352e:	f1b2 0b03 	subs.w	fp, r2, #3
 8003532:	bf48      	it	mi
 8003534:	f102 0b04 	addmi.w	fp, r2, #4
 8003538:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800353c:	1c45      	adds	r5, r0, #1
 800353e:	00ec      	lsls	r4, r5, #3
 8003540:	1a47      	subs	r7, r0, r1
 8003542:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8003818 <__kernel_rem_pio2f+0x30c>
 8003546:	9403      	str	r4, [sp, #12]
 8003548:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800354c:	eb0a 0c01 	add.w	ip, sl, r1
 8003550:	ae1c      	add	r6, sp, #112	; 0x70
 8003552:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 8003556:	2400      	movs	r4, #0
 8003558:	4564      	cmp	r4, ip
 800355a:	dd12      	ble.n	8003582 <__kernel_rem_pio2f+0x76>
 800355c:	9b01      	ldr	r3, [sp, #4]
 800355e:	ac1c      	add	r4, sp, #112	; 0x70
 8003560:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8003564:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8003568:	f04f 0c00 	mov.w	ip, #0
 800356c:	45d4      	cmp	ip, sl
 800356e:	dc27      	bgt.n	80035c0 <__kernel_rem_pio2f+0xb4>
 8003570:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8003574:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8003818 <__kernel_rem_pio2f+0x30c>
 8003578:	4627      	mov	r7, r4
 800357a:	2600      	movs	r6, #0
 800357c:	e016      	b.n	80035ac <__kernel_rem_pio2f+0xa0>
 800357e:	2000      	movs	r0, #0
 8003580:	e7dc      	b.n	800353c <__kernel_rem_pio2f+0x30>
 8003582:	42e7      	cmn	r7, r4
 8003584:	bf5d      	ittte	pl
 8003586:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800358a:	ee07 3a90 	vmovpl	s15, r3
 800358e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8003592:	eef0 7a47 	vmovmi.f32	s15, s14
 8003596:	ece6 7a01 	vstmia	r6!, {s15}
 800359a:	3401      	adds	r4, #1
 800359c:	e7dc      	b.n	8003558 <__kernel_rem_pio2f+0x4c>
 800359e:	ecf9 6a01 	vldmia	r9!, {s13}
 80035a2:	ed97 7a00 	vldr	s14, [r7]
 80035a6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80035aa:	3601      	adds	r6, #1
 80035ac:	428e      	cmp	r6, r1
 80035ae:	f1a7 0704 	sub.w	r7, r7, #4
 80035b2:	ddf4      	ble.n	800359e <__kernel_rem_pio2f+0x92>
 80035b4:	eceb 7a01 	vstmia	fp!, {s15}
 80035b8:	f10c 0c01 	add.w	ip, ip, #1
 80035bc:	3404      	adds	r4, #4
 80035be:	e7d5      	b.n	800356c <__kernel_rem_pio2f+0x60>
 80035c0:	ab08      	add	r3, sp, #32
 80035c2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80035c6:	eddf 8a93 	vldr	s17, [pc, #588]	; 8003814 <__kernel_rem_pio2f+0x308>
 80035ca:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8003810 <__kernel_rem_pio2f+0x304>
 80035ce:	9304      	str	r3, [sp, #16]
 80035d0:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 80035d4:	4656      	mov	r6, sl
 80035d6:	00b3      	lsls	r3, r6, #2
 80035d8:	9305      	str	r3, [sp, #20]
 80035da:	ab58      	add	r3, sp, #352	; 0x160
 80035dc:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80035e0:	ac08      	add	r4, sp, #32
 80035e2:	ab44      	add	r3, sp, #272	; 0x110
 80035e4:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 80035e8:	46a4      	mov	ip, r4
 80035ea:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80035ee:	4637      	mov	r7, r6
 80035f0:	2f00      	cmp	r7, #0
 80035f2:	f1a0 0004 	sub.w	r0, r0, #4
 80035f6:	dc4f      	bgt.n	8003698 <__kernel_rem_pio2f+0x18c>
 80035f8:	4628      	mov	r0, r5
 80035fa:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80035fe:	f000 fa8d 	bl	8003b1c <scalbnf>
 8003602:	eeb0 8a40 	vmov.f32	s16, s0
 8003606:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800360a:	ee28 0a00 	vmul.f32	s0, s16, s0
 800360e:	f000 fa43 	bl	8003a98 <floorf>
 8003612:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8003616:	eea0 8a67 	vfms.f32	s16, s0, s15
 800361a:	2d00      	cmp	r5, #0
 800361c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8003620:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8003624:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8003628:	ee17 9a90 	vmov	r9, s15
 800362c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8003630:	dd44      	ble.n	80036bc <__kernel_rem_pio2f+0x1b0>
 8003632:	f106 3cff 	add.w	ip, r6, #4294967295
 8003636:	ab08      	add	r3, sp, #32
 8003638:	f1c5 0e08 	rsb	lr, r5, #8
 800363c:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8003640:	fa47 f00e 	asr.w	r0, r7, lr
 8003644:	4481      	add	r9, r0
 8003646:	fa00 f00e 	lsl.w	r0, r0, lr
 800364a:	1a3f      	subs	r7, r7, r0
 800364c:	f1c5 0007 	rsb	r0, r5, #7
 8003650:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8003654:	4107      	asrs	r7, r0
 8003656:	2f00      	cmp	r7, #0
 8003658:	dd3f      	ble.n	80036da <__kernel_rem_pio2f+0x1ce>
 800365a:	f04f 0e00 	mov.w	lr, #0
 800365e:	f109 0901 	add.w	r9, r9, #1
 8003662:	4673      	mov	r3, lr
 8003664:	4576      	cmp	r6, lr
 8003666:	dc6b      	bgt.n	8003740 <__kernel_rem_pio2f+0x234>
 8003668:	2d00      	cmp	r5, #0
 800366a:	dd04      	ble.n	8003676 <__kernel_rem_pio2f+0x16a>
 800366c:	2d01      	cmp	r5, #1
 800366e:	d078      	beq.n	8003762 <__kernel_rem_pio2f+0x256>
 8003670:	2d02      	cmp	r5, #2
 8003672:	f000 8081 	beq.w	8003778 <__kernel_rem_pio2f+0x26c>
 8003676:	2f02      	cmp	r7, #2
 8003678:	d12f      	bne.n	80036da <__kernel_rem_pio2f+0x1ce>
 800367a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800367e:	ee30 8a48 	vsub.f32	s16, s0, s16
 8003682:	b353      	cbz	r3, 80036da <__kernel_rem_pio2f+0x1ce>
 8003684:	4628      	mov	r0, r5
 8003686:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800368a:	f000 fa47 	bl	8003b1c <scalbnf>
 800368e:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8003692:	ee38 8a40 	vsub.f32	s16, s16, s0
 8003696:	e020      	b.n	80036da <__kernel_rem_pio2f+0x1ce>
 8003698:	ee60 7a28 	vmul.f32	s15, s0, s17
 800369c:	3f01      	subs	r7, #1
 800369e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036a6:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80036aa:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80036ae:	ecac 0a01 	vstmia	ip!, {s0}
 80036b2:	ed90 0a00 	vldr	s0, [r0]
 80036b6:	ee37 0a80 	vadd.f32	s0, s15, s0
 80036ba:	e799      	b.n	80035f0 <__kernel_rem_pio2f+0xe4>
 80036bc:	d105      	bne.n	80036ca <__kernel_rem_pio2f+0x1be>
 80036be:	1e70      	subs	r0, r6, #1
 80036c0:	ab08      	add	r3, sp, #32
 80036c2:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 80036c6:	11ff      	asrs	r7, r7, #7
 80036c8:	e7c5      	b.n	8003656 <__kernel_rem_pio2f+0x14a>
 80036ca:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80036ce:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80036d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036d6:	da31      	bge.n	800373c <__kernel_rem_pio2f+0x230>
 80036d8:	2700      	movs	r7, #0
 80036da:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80036de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036e2:	f040 809b 	bne.w	800381c <__kernel_rem_pio2f+0x310>
 80036e6:	1e74      	subs	r4, r6, #1
 80036e8:	46a4      	mov	ip, r4
 80036ea:	2000      	movs	r0, #0
 80036ec:	45d4      	cmp	ip, sl
 80036ee:	da4a      	bge.n	8003786 <__kernel_rem_pio2f+0x27a>
 80036f0:	2800      	cmp	r0, #0
 80036f2:	d07a      	beq.n	80037ea <__kernel_rem_pio2f+0x2de>
 80036f4:	ab08      	add	r3, sp, #32
 80036f6:	3d08      	subs	r5, #8
 80036f8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f000 8081 	beq.w	8003804 <__kernel_rem_pio2f+0x2f8>
 8003702:	4628      	mov	r0, r5
 8003704:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003708:	00a5      	lsls	r5, r4, #2
 800370a:	f000 fa07 	bl	8003b1c <scalbnf>
 800370e:	aa44      	add	r2, sp, #272	; 0x110
 8003710:	1d2b      	adds	r3, r5, #4
 8003712:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8003814 <__kernel_rem_pio2f+0x308>
 8003716:	18d1      	adds	r1, r2, r3
 8003718:	4622      	mov	r2, r4
 800371a:	2a00      	cmp	r2, #0
 800371c:	f280 80ae 	bge.w	800387c <__kernel_rem_pio2f+0x370>
 8003720:	4622      	mov	r2, r4
 8003722:	2a00      	cmp	r2, #0
 8003724:	f2c0 80cc 	blt.w	80038c0 <__kernel_rem_pio2f+0x3b4>
 8003728:	a944      	add	r1, sp, #272	; 0x110
 800372a:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800372e:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800380c <__kernel_rem_pio2f+0x300>
 8003732:	eddf 7a39 	vldr	s15, [pc, #228]	; 8003818 <__kernel_rem_pio2f+0x30c>
 8003736:	2000      	movs	r0, #0
 8003738:	1aa1      	subs	r1, r4, r2
 800373a:	e0b6      	b.n	80038aa <__kernel_rem_pio2f+0x39e>
 800373c:	2702      	movs	r7, #2
 800373e:	e78c      	b.n	800365a <__kernel_rem_pio2f+0x14e>
 8003740:	6820      	ldr	r0, [r4, #0]
 8003742:	b94b      	cbnz	r3, 8003758 <__kernel_rem_pio2f+0x24c>
 8003744:	b118      	cbz	r0, 800374e <__kernel_rem_pio2f+0x242>
 8003746:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800374a:	6020      	str	r0, [r4, #0]
 800374c:	2001      	movs	r0, #1
 800374e:	f10e 0e01 	add.w	lr, lr, #1
 8003752:	3404      	adds	r4, #4
 8003754:	4603      	mov	r3, r0
 8003756:	e785      	b.n	8003664 <__kernel_rem_pio2f+0x158>
 8003758:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800375c:	6020      	str	r0, [r4, #0]
 800375e:	4618      	mov	r0, r3
 8003760:	e7f5      	b.n	800374e <__kernel_rem_pio2f+0x242>
 8003762:	1e74      	subs	r4, r6, #1
 8003764:	a808      	add	r0, sp, #32
 8003766:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800376a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800376e:	f10d 0c20 	add.w	ip, sp, #32
 8003772:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8003776:	e77e      	b.n	8003676 <__kernel_rem_pio2f+0x16a>
 8003778:	1e74      	subs	r4, r6, #1
 800377a:	a808      	add	r0, sp, #32
 800377c:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8003780:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8003784:	e7f3      	b.n	800376e <__kernel_rem_pio2f+0x262>
 8003786:	ab08      	add	r3, sp, #32
 8003788:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800378c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003790:	4318      	orrs	r0, r3
 8003792:	e7ab      	b.n	80036ec <__kernel_rem_pio2f+0x1e0>
 8003794:	f10c 0c01 	add.w	ip, ip, #1
 8003798:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800379c:	2c00      	cmp	r4, #0
 800379e:	d0f9      	beq.n	8003794 <__kernel_rem_pio2f+0x288>
 80037a0:	9b05      	ldr	r3, [sp, #20]
 80037a2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80037a6:	eb0d 0003 	add.w	r0, sp, r3
 80037aa:	9b01      	ldr	r3, [sp, #4]
 80037ac:	18f4      	adds	r4, r6, r3
 80037ae:	ab1c      	add	r3, sp, #112	; 0x70
 80037b0:	1c77      	adds	r7, r6, #1
 80037b2:	384c      	subs	r0, #76	; 0x4c
 80037b4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80037b8:	4466      	add	r6, ip
 80037ba:	42be      	cmp	r6, r7
 80037bc:	f6ff af0b 	blt.w	80035d6 <__kernel_rem_pio2f+0xca>
 80037c0:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 80037c4:	f8dd e008 	ldr.w	lr, [sp, #8]
 80037c8:	ee07 3a90 	vmov	s15, r3
 80037cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037d0:	f04f 0c00 	mov.w	ip, #0
 80037d4:	ece4 7a01 	vstmia	r4!, {s15}
 80037d8:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8003818 <__kernel_rem_pio2f+0x30c>
 80037dc:	46a1      	mov	r9, r4
 80037de:	458c      	cmp	ip, r1
 80037e0:	dd07      	ble.n	80037f2 <__kernel_rem_pio2f+0x2e6>
 80037e2:	ece0 7a01 	vstmia	r0!, {s15}
 80037e6:	3701      	adds	r7, #1
 80037e8:	e7e7      	b.n	80037ba <__kernel_rem_pio2f+0x2ae>
 80037ea:	9804      	ldr	r0, [sp, #16]
 80037ec:	f04f 0c01 	mov.w	ip, #1
 80037f0:	e7d2      	b.n	8003798 <__kernel_rem_pio2f+0x28c>
 80037f2:	ecfe 6a01 	vldmia	lr!, {s13}
 80037f6:	ed39 7a01 	vldmdb	r9!, {s14}
 80037fa:	f10c 0c01 	add.w	ip, ip, #1
 80037fe:	eee6 7a87 	vfma.f32	s15, s13, s14
 8003802:	e7ec      	b.n	80037de <__kernel_rem_pio2f+0x2d2>
 8003804:	3c01      	subs	r4, #1
 8003806:	e775      	b.n	80036f4 <__kernel_rem_pio2f+0x1e8>
 8003808:	08004004 	.word	0x08004004
 800380c:	08003fd8 	.word	0x08003fd8
 8003810:	43800000 	.word	0x43800000
 8003814:	3b800000 	.word	0x3b800000
 8003818:	00000000 	.word	0x00000000
 800381c:	9b03      	ldr	r3, [sp, #12]
 800381e:	eeb0 0a48 	vmov.f32	s0, s16
 8003822:	1a98      	subs	r0, r3, r2
 8003824:	f000 f97a 	bl	8003b1c <scalbnf>
 8003828:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8003810 <__kernel_rem_pio2f+0x304>
 800382c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8003830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003834:	db19      	blt.n	800386a <__kernel_rem_pio2f+0x35e>
 8003836:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8003814 <__kernel_rem_pio2f+0x308>
 800383a:	ee60 7a27 	vmul.f32	s15, s0, s15
 800383e:	aa08      	add	r2, sp, #32
 8003840:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003844:	1c74      	adds	r4, r6, #1
 8003846:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800384a:	3508      	adds	r5, #8
 800384c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8003850:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003854:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8003858:	ee10 3a10 	vmov	r3, s0
 800385c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8003860:	ee17 3a90 	vmov	r3, s15
 8003864:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8003868:	e74b      	b.n	8003702 <__kernel_rem_pio2f+0x1f6>
 800386a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800386e:	aa08      	add	r2, sp, #32
 8003870:	ee10 3a10 	vmov	r3, s0
 8003874:	4634      	mov	r4, r6
 8003876:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800387a:	e742      	b.n	8003702 <__kernel_rem_pio2f+0x1f6>
 800387c:	a808      	add	r0, sp, #32
 800387e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8003882:	9001      	str	r0, [sp, #4]
 8003884:	ee07 0a90 	vmov	s15, r0
 8003888:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800388c:	3a01      	subs	r2, #1
 800388e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8003892:	ee20 0a07 	vmul.f32	s0, s0, s14
 8003896:	ed61 7a01 	vstmdb	r1!, {s15}
 800389a:	e73e      	b.n	800371a <__kernel_rem_pio2f+0x20e>
 800389c:	ecfc 6a01 	vldmia	ip!, {s13}
 80038a0:	ecb6 7a01 	vldmia	r6!, {s14}
 80038a4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80038a8:	3001      	adds	r0, #1
 80038aa:	4550      	cmp	r0, sl
 80038ac:	dc01      	bgt.n	80038b2 <__kernel_rem_pio2f+0x3a6>
 80038ae:	4288      	cmp	r0, r1
 80038b0:	ddf4      	ble.n	800389c <__kernel_rem_pio2f+0x390>
 80038b2:	a858      	add	r0, sp, #352	; 0x160
 80038b4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80038b8:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 80038bc:	3a01      	subs	r2, #1
 80038be:	e730      	b.n	8003722 <__kernel_rem_pio2f+0x216>
 80038c0:	9a66      	ldr	r2, [sp, #408]	; 0x198
 80038c2:	2a02      	cmp	r2, #2
 80038c4:	dc09      	bgt.n	80038da <__kernel_rem_pio2f+0x3ce>
 80038c6:	2a00      	cmp	r2, #0
 80038c8:	dc2a      	bgt.n	8003920 <__kernel_rem_pio2f+0x414>
 80038ca:	d043      	beq.n	8003954 <__kernel_rem_pio2f+0x448>
 80038cc:	f009 0007 	and.w	r0, r9, #7
 80038d0:	b059      	add	sp, #356	; 0x164
 80038d2:	ecbd 8b04 	vpop	{d8-d9}
 80038d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038da:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80038dc:	2b03      	cmp	r3, #3
 80038de:	d1f5      	bne.n	80038cc <__kernel_rem_pio2f+0x3c0>
 80038e0:	ab30      	add	r3, sp, #192	; 0xc0
 80038e2:	442b      	add	r3, r5
 80038e4:	461a      	mov	r2, r3
 80038e6:	4619      	mov	r1, r3
 80038e8:	4620      	mov	r0, r4
 80038ea:	2800      	cmp	r0, #0
 80038ec:	f1a1 0104 	sub.w	r1, r1, #4
 80038f0:	dc51      	bgt.n	8003996 <__kernel_rem_pio2f+0x48a>
 80038f2:	4621      	mov	r1, r4
 80038f4:	2901      	cmp	r1, #1
 80038f6:	f1a2 0204 	sub.w	r2, r2, #4
 80038fa:	dc5c      	bgt.n	80039b6 <__kernel_rem_pio2f+0x4aa>
 80038fc:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8003818 <__kernel_rem_pio2f+0x30c>
 8003900:	3304      	adds	r3, #4
 8003902:	2c01      	cmp	r4, #1
 8003904:	dc67      	bgt.n	80039d6 <__kernel_rem_pio2f+0x4ca>
 8003906:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800390a:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800390e:	2f00      	cmp	r7, #0
 8003910:	d167      	bne.n	80039e2 <__kernel_rem_pio2f+0x4d6>
 8003912:	edc8 6a00 	vstr	s13, [r8]
 8003916:	ed88 7a01 	vstr	s14, [r8, #4]
 800391a:	edc8 7a02 	vstr	s15, [r8, #8]
 800391e:	e7d5      	b.n	80038cc <__kernel_rem_pio2f+0x3c0>
 8003920:	aa30      	add	r2, sp, #192	; 0xc0
 8003922:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8003818 <__kernel_rem_pio2f+0x30c>
 8003926:	4413      	add	r3, r2
 8003928:	4622      	mov	r2, r4
 800392a:	2a00      	cmp	r2, #0
 800392c:	da24      	bge.n	8003978 <__kernel_rem_pio2f+0x46c>
 800392e:	b34f      	cbz	r7, 8003984 <__kernel_rem_pio2f+0x478>
 8003930:	eef1 7a47 	vneg.f32	s15, s14
 8003934:	edc8 7a00 	vstr	s15, [r8]
 8003938:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800393c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003940:	aa31      	add	r2, sp, #196	; 0xc4
 8003942:	2301      	movs	r3, #1
 8003944:	429c      	cmp	r4, r3
 8003946:	da20      	bge.n	800398a <__kernel_rem_pio2f+0x47e>
 8003948:	b10f      	cbz	r7, 800394e <__kernel_rem_pio2f+0x442>
 800394a:	eef1 7a67 	vneg.f32	s15, s15
 800394e:	edc8 7a01 	vstr	s15, [r8, #4]
 8003952:	e7bb      	b.n	80038cc <__kernel_rem_pio2f+0x3c0>
 8003954:	aa30      	add	r2, sp, #192	; 0xc0
 8003956:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8003818 <__kernel_rem_pio2f+0x30c>
 800395a:	4413      	add	r3, r2
 800395c:	2c00      	cmp	r4, #0
 800395e:	da05      	bge.n	800396c <__kernel_rem_pio2f+0x460>
 8003960:	b10f      	cbz	r7, 8003966 <__kernel_rem_pio2f+0x45a>
 8003962:	eef1 7a67 	vneg.f32	s15, s15
 8003966:	edc8 7a00 	vstr	s15, [r8]
 800396a:	e7af      	b.n	80038cc <__kernel_rem_pio2f+0x3c0>
 800396c:	ed33 7a01 	vldmdb	r3!, {s14}
 8003970:	3c01      	subs	r4, #1
 8003972:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003976:	e7f1      	b.n	800395c <__kernel_rem_pio2f+0x450>
 8003978:	ed73 7a01 	vldmdb	r3!, {s15}
 800397c:	3a01      	subs	r2, #1
 800397e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003982:	e7d2      	b.n	800392a <__kernel_rem_pio2f+0x41e>
 8003984:	eef0 7a47 	vmov.f32	s15, s14
 8003988:	e7d4      	b.n	8003934 <__kernel_rem_pio2f+0x428>
 800398a:	ecb2 7a01 	vldmia	r2!, {s14}
 800398e:	3301      	adds	r3, #1
 8003990:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003994:	e7d6      	b.n	8003944 <__kernel_rem_pio2f+0x438>
 8003996:	edd1 7a00 	vldr	s15, [r1]
 800399a:	edd1 6a01 	vldr	s13, [r1, #4]
 800399e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80039a2:	3801      	subs	r0, #1
 80039a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80039a8:	ed81 7a00 	vstr	s14, [r1]
 80039ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039b0:	edc1 7a01 	vstr	s15, [r1, #4]
 80039b4:	e799      	b.n	80038ea <__kernel_rem_pio2f+0x3de>
 80039b6:	edd2 7a00 	vldr	s15, [r2]
 80039ba:	edd2 6a01 	vldr	s13, [r2, #4]
 80039be:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80039c2:	3901      	subs	r1, #1
 80039c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80039c8:	ed82 7a00 	vstr	s14, [r2]
 80039cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039d0:	edc2 7a01 	vstr	s15, [r2, #4]
 80039d4:	e78e      	b.n	80038f4 <__kernel_rem_pio2f+0x3e8>
 80039d6:	ed33 7a01 	vldmdb	r3!, {s14}
 80039da:	3c01      	subs	r4, #1
 80039dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80039e0:	e78f      	b.n	8003902 <__kernel_rem_pio2f+0x3f6>
 80039e2:	eef1 6a66 	vneg.f32	s13, s13
 80039e6:	eeb1 7a47 	vneg.f32	s14, s14
 80039ea:	edc8 6a00 	vstr	s13, [r8]
 80039ee:	ed88 7a01 	vstr	s14, [r8, #4]
 80039f2:	eef1 7a67 	vneg.f32	s15, s15
 80039f6:	e790      	b.n	800391a <__kernel_rem_pio2f+0x40e>

080039f8 <__kernel_sinf>:
 80039f8:	ee10 3a10 	vmov	r3, s0
 80039fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a00:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8003a04:	da04      	bge.n	8003a10 <__kernel_sinf+0x18>
 8003a06:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8003a0a:	ee17 3a90 	vmov	r3, s15
 8003a0e:	b35b      	cbz	r3, 8003a68 <__kernel_sinf+0x70>
 8003a10:	ee20 7a00 	vmul.f32	s14, s0, s0
 8003a14:	eddf 7a15 	vldr	s15, [pc, #84]	; 8003a6c <__kernel_sinf+0x74>
 8003a18:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8003a70 <__kernel_sinf+0x78>
 8003a1c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8003a20:	eddf 7a14 	vldr	s15, [pc, #80]	; 8003a74 <__kernel_sinf+0x7c>
 8003a24:	eee6 7a07 	vfma.f32	s15, s12, s14
 8003a28:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8003a78 <__kernel_sinf+0x80>
 8003a2c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8003a30:	eddf 7a12 	vldr	s15, [pc, #72]	; 8003a7c <__kernel_sinf+0x84>
 8003a34:	ee60 6a07 	vmul.f32	s13, s0, s14
 8003a38:	eee6 7a07 	vfma.f32	s15, s12, s14
 8003a3c:	b930      	cbnz	r0, 8003a4c <__kernel_sinf+0x54>
 8003a3e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8003a80 <__kernel_sinf+0x88>
 8003a42:	eea7 6a27 	vfma.f32	s12, s14, s15
 8003a46:	eea6 0a26 	vfma.f32	s0, s12, s13
 8003a4a:	4770      	bx	lr
 8003a4c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8003a50:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8003a54:	eee0 7a86 	vfma.f32	s15, s1, s12
 8003a58:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8003a5c:	eddf 7a09 	vldr	s15, [pc, #36]	; 8003a84 <__kernel_sinf+0x8c>
 8003a60:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8003a64:	ee30 0a60 	vsub.f32	s0, s0, s1
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	2f2ec9d3 	.word	0x2f2ec9d3
 8003a70:	b2d72f34 	.word	0xb2d72f34
 8003a74:	3638ef1b 	.word	0x3638ef1b
 8003a78:	b9500d01 	.word	0xb9500d01
 8003a7c:	3c088889 	.word	0x3c088889
 8003a80:	be2aaaab 	.word	0xbe2aaaab
 8003a84:	3e2aaaab 	.word	0x3e2aaaab

08003a88 <fabsf>:
 8003a88:	ee10 3a10 	vmov	r3, s0
 8003a8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a90:	ee00 3a10 	vmov	s0, r3
 8003a94:	4770      	bx	lr
	...

08003a98 <floorf>:
 8003a98:	ee10 3a10 	vmov	r3, s0
 8003a9c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8003aa0:	3a7f      	subs	r2, #127	; 0x7f
 8003aa2:	2a16      	cmp	r2, #22
 8003aa4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003aa8:	dc2a      	bgt.n	8003b00 <floorf+0x68>
 8003aaa:	2a00      	cmp	r2, #0
 8003aac:	da11      	bge.n	8003ad2 <floorf+0x3a>
 8003aae:	eddf 7a18 	vldr	s15, [pc, #96]	; 8003b10 <floorf+0x78>
 8003ab2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003ab6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003abe:	dd05      	ble.n	8003acc <floorf+0x34>
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	da23      	bge.n	8003b0c <floorf+0x74>
 8003ac4:	4a13      	ldr	r2, [pc, #76]	; (8003b14 <floorf+0x7c>)
 8003ac6:	2900      	cmp	r1, #0
 8003ac8:	bf18      	it	ne
 8003aca:	4613      	movne	r3, r2
 8003acc:	ee00 3a10 	vmov	s0, r3
 8003ad0:	4770      	bx	lr
 8003ad2:	4911      	ldr	r1, [pc, #68]	; (8003b18 <floorf+0x80>)
 8003ad4:	4111      	asrs	r1, r2
 8003ad6:	420b      	tst	r3, r1
 8003ad8:	d0fa      	beq.n	8003ad0 <floorf+0x38>
 8003ada:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8003b10 <floorf+0x78>
 8003ade:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003ae2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aea:	ddef      	ble.n	8003acc <floorf+0x34>
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	bfbe      	ittt	lt
 8003af0:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8003af4:	fa40 f202 	asrlt.w	r2, r0, r2
 8003af8:	189b      	addlt	r3, r3, r2
 8003afa:	ea23 0301 	bic.w	r3, r3, r1
 8003afe:	e7e5      	b.n	8003acc <floorf+0x34>
 8003b00:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8003b04:	d3e4      	bcc.n	8003ad0 <floorf+0x38>
 8003b06:	ee30 0a00 	vadd.f32	s0, s0, s0
 8003b0a:	4770      	bx	lr
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	e7dd      	b.n	8003acc <floorf+0x34>
 8003b10:	7149f2ca 	.word	0x7149f2ca
 8003b14:	bf800000 	.word	0xbf800000
 8003b18:	007fffff 	.word	0x007fffff

08003b1c <scalbnf>:
 8003b1c:	ee10 3a10 	vmov	r3, s0
 8003b20:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8003b24:	d025      	beq.n	8003b72 <scalbnf+0x56>
 8003b26:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8003b2a:	d302      	bcc.n	8003b32 <scalbnf+0x16>
 8003b2c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8003b30:	4770      	bx	lr
 8003b32:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8003b36:	d122      	bne.n	8003b7e <scalbnf+0x62>
 8003b38:	4b2a      	ldr	r3, [pc, #168]	; (8003be4 <scalbnf+0xc8>)
 8003b3a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8003be8 <scalbnf+0xcc>
 8003b3e:	4298      	cmp	r0, r3
 8003b40:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003b44:	db16      	blt.n	8003b74 <scalbnf+0x58>
 8003b46:	ee10 3a10 	vmov	r3, s0
 8003b4a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8003b4e:	3a19      	subs	r2, #25
 8003b50:	4402      	add	r2, r0
 8003b52:	2afe      	cmp	r2, #254	; 0xfe
 8003b54:	dd15      	ble.n	8003b82 <scalbnf+0x66>
 8003b56:	ee10 3a10 	vmov	r3, s0
 8003b5a:	eddf 7a24 	vldr	s15, [pc, #144]	; 8003bec <scalbnf+0xd0>
 8003b5e:	eddf 6a24 	vldr	s13, [pc, #144]	; 8003bf0 <scalbnf+0xd4>
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	eeb0 7a67 	vmov.f32	s14, s15
 8003b68:	bfb8      	it	lt
 8003b6a:	eef0 7a66 	vmovlt.f32	s15, s13
 8003b6e:	ee27 0a27 	vmul.f32	s0, s14, s15
 8003b72:	4770      	bx	lr
 8003b74:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8003bf4 <scalbnf+0xd8>
 8003b78:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003b7c:	4770      	bx	lr
 8003b7e:	0dd2      	lsrs	r2, r2, #23
 8003b80:	e7e6      	b.n	8003b50 <scalbnf+0x34>
 8003b82:	2a00      	cmp	r2, #0
 8003b84:	dd06      	ble.n	8003b94 <scalbnf+0x78>
 8003b86:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003b8a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8003b8e:	ee00 3a10 	vmov	s0, r3
 8003b92:	4770      	bx	lr
 8003b94:	f112 0f16 	cmn.w	r2, #22
 8003b98:	da1a      	bge.n	8003bd0 <scalbnf+0xb4>
 8003b9a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8003b9e:	4298      	cmp	r0, r3
 8003ba0:	ee10 3a10 	vmov	r3, s0
 8003ba4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ba8:	dd0a      	ble.n	8003bc0 <scalbnf+0xa4>
 8003baa:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8003bec <scalbnf+0xd0>
 8003bae:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003bf0 <scalbnf+0xd4>
 8003bb2:	eef0 7a40 	vmov.f32	s15, s0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	bf18      	it	ne
 8003bba:	eeb0 0a47 	vmovne.f32	s0, s14
 8003bbe:	e7db      	b.n	8003b78 <scalbnf+0x5c>
 8003bc0:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8003bf4 <scalbnf+0xd8>
 8003bc4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003bf8 <scalbnf+0xdc>
 8003bc8:	eef0 7a40 	vmov.f32	s15, s0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	e7f3      	b.n	8003bb8 <scalbnf+0x9c>
 8003bd0:	3219      	adds	r2, #25
 8003bd2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003bd6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8003bda:	eddf 7a08 	vldr	s15, [pc, #32]	; 8003bfc <scalbnf+0xe0>
 8003bde:	ee07 3a10 	vmov	s14, r3
 8003be2:	e7c4      	b.n	8003b6e <scalbnf+0x52>
 8003be4:	ffff3cb0 	.word	0xffff3cb0
 8003be8:	4c000000 	.word	0x4c000000
 8003bec:	7149f2ca 	.word	0x7149f2ca
 8003bf0:	f149f2ca 	.word	0xf149f2ca
 8003bf4:	0da24260 	.word	0x0da24260
 8003bf8:	8da24260 	.word	0x8da24260
 8003bfc:	33000000 	.word	0x33000000

08003c00 <_init>:
 8003c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c02:	bf00      	nop
 8003c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c06:	bc08      	pop	{r3}
 8003c08:	469e      	mov	lr, r3
 8003c0a:	4770      	bx	lr

08003c0c <_fini>:
 8003c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c0e:	bf00      	nop
 8003c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c12:	bc08      	pop	{r3}
 8003c14:	469e      	mov	lr, r3
 8003c16:	4770      	bx	lr
